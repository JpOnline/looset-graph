{"version":3,"sources":["looset_graph/app.cljs"],"mappings":"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","names":["js/goog.DEBUG","js/console.log","looset-graph.app/<sub","cljs.core.comp","cljs.core/deref","re-frame.alpha/subscribe","looset-graph.app/>evt","re-frame.alpha/dispatch","looset-graph.app/with-defaults","f","defaults-vec","m","G__29903","cljs.core.map","p__29904","vec__29905","cljs.core.nth","k","default","or__5045__auto__","cljs.core.get","cljs.core.partition","looset-graph.app/event-to-analytics","re_frame.alpha.__GT_interceptor","context","vec__29908","evt","value","evt-name","cljs.core/Keyword","cljs.core/name","map->str","v","cljs.core.assoc","cljs.core/map?","evt-value","cljs.core/clj->js","cljs.core/reduce-kv","js/gtag","p1__29911#","looset-graph.app/type-str->type","cljs.core._EQ_","looset-graph.app/extract-nodes-from-edge-rule","edge","node-from-id","cljs.core.get_in","node-from-type","node-to-type","node-to-id","var_args","G__29913","looset-graph.app/find-visible","js/Error","visibles","nodes-map","node","looset_graph.app.find_visible","result","to-visit","visited","new-visited","cljs.core.conj","parent-node","node-labels","new-to-visit","clojure.set.union","clojure.set.difference","new-result","cljs.core/seq","cljs.core/first","looset-graph.app/visible-nodes","fold-list","cljs.core.remove","cljs.core/set","re_frame.alpha.reg_sub","re_frame.alpha.reg_flow","re-frame.alpha/flow<-","p__29914","map__29915","cljs.core/--destructure-map","p__29919","vec__29920","looset-graph.app/selected-nodes","hovered-node","clicked-nodes","cljs.core/empty?","p1__29916#","cljs.core.filter","cljs.core/contains?","cljs.core/second","p1__29918#","p2__29917#","cljs.core.reduce","p__29923","map__29924","hovs","clks","nmap","p__29925","vec__29926","looset-graph.app/selected-nodes-visible","selected-nodes","visible-nodes","clojure.set.intersection","p__29929","vec__29930","looset-graph.app/selected-node?","_","looset-graph.app/text->color","text","G__29933","cljs.core/mod","cljs.core/hash","looset-graph.app/label-font-family","p__29937","vec__29938","looset-graph.app/vis-data","p1__29935#","p1__29936#","nodes","p1__29934#","G__29941","cljs.core.into","->node","p__29942","vec__29943","map__29946","map__29947","node-id","x","y","type","name","get-from-set","get-to-set","cljs.core/val","cljs.core.apply","cljs.core/concat","cljs.core.mapcat","cljs.core.partial","->edge","p__29948","vec__29949","iter__5523__auto__","s__29953","cljs.core/LazySeq","temp__5804__auto__","xs__6360__auto__","iterys__5519__auto__","s__29955","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__29957","cljs.core/chunk-buffer","i__29956","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29954","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__29952","from","to","cljs.core.not_EQ_","p__29958","map__29959","looset-graph.app/left-panel-size","app-state","looset-graph.app/graph-text","looset-graph.app/graph-ast","looset-graph.app/extract-nodes-from-foldable-rule","foldable","foldable-id-name","foldable-type-str","foldable-type","label-or-parent","extract-node-info","id","type-str","cljs.core.merge","inner-nodes","cljs.core.drop","foldable-id-node","cljs.core/keys","cljs.core/merge","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","looset-graph.app/deep-merge-with","seq29960","G__29961","cljs.core/next","self__5754__auto__","maps","cljs.core/every?","cljs.core/merge-with","looset-graph.app/merge-nodes","res","latter","cljs.core/set?","looset-graph.app/nodes-hierarchy","p__29964","vec__29965","r","cljs.core/not","path","cur-k","cur-v","looset_graph$app$nodes_hierarchy_$_path","cur","temp__5802__auto__","parent","to-assoc","with-node-assoced","cljs.core/assoc-in","with-its-labels-assoced","p1__29962#","p2__29963#","p__29969","vec__29970","looset-graph.app/nodes-list","fold-ui","node-children","opened?","p1__29968#","G__29973","G__29974","G__29975","G__29976","looset-graph.app/nodes-ui","looset-graph.app/fold-ui","looset-graph.app/sort-nodes","nodes-hierarchy","cljs.core.sort_by","p__29977","vec__29978","_v","p__29982","vec__29983","looset-graph.app/nodes-map->fold-list","p1__29981#","p__29986","map__29987","G__29989","looset-graph.app/get-edn-string","p__29990","vec__29991","all","looset_graph.app.get_edn_string","acc","s","cljs.core/array?","looset-graph.app/extract-edn-props","node-prop","edn","cljs.reader.read_string","p__29997","map__29998","looset-graph.app/no-memo-nodes-map*","graph-ast","nodes-from-edges","p1__29994#","node-props","p1__29995#","p1__29996#","cljs.core.mapv","looset-graph.app/nodes-map*","cljs.core/memoize","p__29999","map__30000","nodes-ui","nodes-map*","looset_graph.app.deep_merge_with","cljs.core/select-keys","looset-graph.app/nodes-map","p__30001","vec__30002","looset-graph.app/nodes-map-name","e30005","cljs.core/tap>","p__30006","vec__30007","looset-graph.app/foldable?","looset-graph.app/valid-graph?","looset-graph.app/hovered-node","looset-graph.app/vis-option-hierarchy","looset-graph.app/vis-view","p1__30010#","looset-graph.app/clicked-nodes","looset-graph.app/hidden-nodes","G__30012","p1__30011#","p__30013","vec__30014","looset-graph.app/show-unhide-button?","hidden-nodes","and__5043__auto__","p__30018","map__30019","looset-graph.app/show-expand-button?","p1__30017#","looset-graph.app/nodes-map->graph-text-reduce-step","p__30023","p__30024","vec__30025","vec__30028","children","edges","props","node-k*","node-v","p1__30020#","rename-if-label","node-k","edges-to","cljs.core/vals","cljs.core/vec","cljs.core/flatten","custom-props","cljs.core.dissoc","custom-props*","clojure.data/diff","cljs.core/str","p1__30021#","p1__30022#","p__30031","vec__30032","looset-graph.app/nodes-map->graph-text","p__30035","vec__30036","p__30039","vec__30040","looset-graph.app/resizing-panels","_event","new-state","re_frame.alpha.reg_event_db","p__30043","vec__30044","looset-graph.app/mouse-moved","_y","resizing-panels?","G__30047","looset-graph.app/memo-graph-ast","looset-graph.graph-parser/graph-ast","p__30050","vec__30051","looset-graph.app/set-graph-text","e30054","p1__30048#","p1__30049#","cljs.core.update_in","cljs.core.merge_with","p__30056","vec__30057","looset-graph.app/toggle-open-close","p1__30055#","p__30063","vec__30064","looset-graph.app/nodes-list-item-clicked","event","p1__30060#","p2__30061#","toggly-add","p1__30062#","cljs.core/last","looset-graph.app/round-by","step","pos","js/Math.round","p__30068","vec__30069","looset-graph.app/set-nodes-positions","dragging?","nodes-positions*","nodes-positions","p__30072","map__30073","p1__30067#","p__30074","vec__30075","map__30078","looset-graph.app/set-vis-view","view-position","scale","p__30080","vec__30081","map__30084","looset-graph.app/set-nodes-positions-hierarchy","_view-position","_scale","args","p__30085","map__30086","p1__30079#","looset-graph.app/clear-nodes-positions","p1__30087#","s__30089","b__30091","i__30090","vec__30092","iter__30088","vec__30095","p__30098","vec__30099","looset-graph.app/drag-changed","p__30103","vec__30104","looset-graph.app/toggle-hidden","p1__30102#","p__30107","vec__30108","looset-graph.app/node-hovered","nodes-ids","p__30111","vec__30112","looset-graph.app/debug-event","p__30115","vec__30116","looset-graph.app/organize-hierarchy-positions","p__30119","vec__30120","looset-graph.app/organize-hierarchy-positions-step-2","looset-graph.app/hide-all-or-selected","all-nodes","nodes-to-unhide","hidden","looset-graph.app/show-selected","unhidden","looset-graph.app/collapse-all-or-selected","nodes-to-collapse","closed","looset-graph.app/expand-selected","opened","p__30123","vec__30124","looset-graph.app/mouse-select-mode-evt","state","p__30130","vec__30131","looset-graph.app/network-clicked","click-event","p1__30127#","p2__30128#","p1__30129#","looset-graph.app/toggle-edit-graph-text-area","js/looset-graph","js/looset-graph.app","js/looset-graph.app.network","looset-graph.app/network","cljs.core.atom","looset-graph.app/graph-component-inner","graph-component-id","update-comp","p__30138","vec__30139","component","prev-props","map__30142","prev-vis-data","vis-data","options","view","reagent.core/props","mount-comp","container","js/document","cljs.core/reset!","js/vis","G__30143","G__30144","cljs.core.js__GT_clj","G__30145","G__30146","js/setTimeout","G__30147","p1__30137#","G__30148","reagent.core.create_class","looset-graph.app/graph-component","re_frame.alpha.sub","looset-graph.app/panel-splitter","G__30149","looset-graph.app/botton-buttons","G__30150","looset-graph.app/svg-eye","looset-graph.app/svg-filled-eye","p__30151","map__30152","map__30153","map__30154","looset-graph.app/node-view","class","color","level","hidden?","node-name","selected-node?","mouse-select-mode","foldable-node?","G__30155","G__30156","G__30157","G__30158","G__30159","p__30160","map__30161","looset-graph.app/svg-label","rotation-degree","p__30162","map__30163","looset-graph.app/svg-arrow-triangle","p__30164","map__30165","looset-graph.app/label-node","node-item","p__30166","map__30167","looset-graph.app/lix-node","looset-graph.app/nodes-list-view","s__30169","b__30171","i__30170","iter__30168","node-type-comp","G__30173","fexpr__30172","G__30175","fexpr__30174","looset-graph.app/black-cursor-svg-path","looset-graph.app/left-buttons","icons-size","G__30176","G__30177","G__30178","G__30179","G__30180","G__30181","G__30182","G__30183","looset-graph.app/code-font-family","looset-graph.app/code-font-size","looset-graph.app/code-margin","looset-graph.app/code-padding","p1__30184#","looset-graph.app/edit-raw-graph-text","G__30185","p1__30186#","p1__30187#","p1__30188#","looset-graph.app/debug-quick-val-set","G__30189","G__30190","G__30191","G__30192","looset-graph.app/quattrocento-font","looset-graph.app/global-style","looset-graph.app/main","looset-graph.util/error-boundary","p__30193","vec__30194","looset-graph.app/set-toggle-input","n","looset-graph.app/toggle-input","p__30197","vec__30198","looset-graph.app/set-number-input","looset-graph.app/number-input","looset-graph.app/initial-state","looset-graph.app/gzip","cs-mode","b-array","cs","writer","js/Response","looset-graph.app/gzip-compress","string","$","js/TextEncoder","js/CompressionStream","p1__30201#","js/Uint8Array","cljs.core/char","looset-graph.app/gzip-decompress","compressed-string","p1__30202#","js/DecompressionStream","p1__30203#","js/TextDecoder","looset-graph.app/set-url-state-interceptor","re_frame.std_interceptors.on_changes","graph-text","p1__30204#","loc","js/window.location","js/window.history.replaceState","js/encodeURIComponent","js/btoa","re-frame.alpha/reg-global-interceptor","looset-graph.app/init-mousemove","p1__30205#","js/document.body.addEventListener","G__30206","p__30207","vec__30208","looset-graph.app/init-state","compressed-graph","js/URLSearchParams","js/window.location.search","default-graph","p1__30211#","js/atob","re-frame.alpha/dispatch-sync","looset-graph.app/mouse-up","looset-graph.app/init-mouseup","G__30212","looset-graph.app/mount-app-element","re-frame.alpha/clear-subscription-cache!","el","reagent.dom.render","looset-graph.app/init","cljs.core/chunk-first"],"sourcesContent":["(ns looset-graph.app\n  (:require\n    [cljs.reader]\n    [clojure.data]\n    [clojure.set :as set]\n    [clojure.string]\n    [looset-graph.graph-parser :as graph-parser]\n    [looset-graph.util :as util]\n    [re-frame.alpha :as re-frame]\n    [re-frame.std-interceptors]\n    [reagent.core :as reagent]\n    [reagent.dom]))\n\n;; ---- Util ----\n\n(when ^boolean js/goog.DEBUG ;; Code removed in production\n  ;; (day8.re-frame-10x/show-panel! true) ;; Or just press ctrl-shift-x to toggle pannel\n  (js/console.log \"Debugger mode!\"))\n\n;; Redef re-frame subscribe and dispatch for brevity\n(def <sub (comp deref re-frame/subscribe))\n(def >evt re-frame/dispatch)\n\n(defn with-defaults\n  \"Meant to be used with `reg-flow` :output. Define default values\n  for values in the map and sends the values as a vector.\"\n  [f defaults-vec]\n  (fn [m]\n    (f (map (fn [[k default]]\n              (or (get m k) default))\n            (partition 2 defaults-vec)))))\n\n(def event-to-analytics\n  (re-frame/->interceptor\n    :id :event-to-analytics\n    :after (fn [context]\n             (let [[evt value] (:event (:coeffects context))\n                   evt-name (if (keyword? evt) (name evt) (str evt))\n                   map->str (fn [m k v] (assoc m k (if (map? v) (str v) v)))\n                   evt-value (if (map? value)\n                               (clj->js (reduce-kv map->str {} value))\n                               #js{\"value\" value})]\n               (js/gtag \"event\" evt-name evt-value)\n               ;; (js/console.log evt-name evt-value)\n               context))))\n\n;; ---- Subs ----\n\n;; TODO: Replace all reg-subs for reg-flow? Maybe there's still usage for subs,\n;; it also has the nice effect of defining default values in a single place.\n\n;; I'll want to abstract the subs, make a generic one and pass the path as an\n;; argument to subs. There are people doing that as in https://vvvvalvalval.github.io/posts/some-re-frame-patterns-for-composability.html#generic_subscriptions_and_events_for_app-db_paths\n;; but my was to follow official re-frame documentation and indeed create a lot\n;; of subs to extract data from app-state. Re-frame official documentation about it\n;; is in https://day8.github.io/re-frame/correcting-a-wrong/#a-final-faq\n\n;; Reviewing re-frame philosophy https://github.com/day8/re-frame/blob/master/docs/historical.md\n;; I can see how I that abstracting the subs doesn't hit the main philosophy,\n;; but might be more in sync with my philosophy of to not try to predict how the\n;; code will need to change, the point of not generalizing subs is that if I\n;; the structure of the app-state I'll need to change all the views, but maybe\n;; I won't need it, and if I need might not be such a problem. I might generalize\n;; the layer 2 subs and simple events and define defaults value in the initial-state.\n\n;; (defn dot-graph\n;;   [app-state]\n;;   (get-in app-state [:domain :dot-graph] \"\"))\n;; (re-frame/reg-sub ::dot-graph dot-graph)\n\n(def type-str->type #(if (= \"labelID\" %) :label :lix))\n\n(defn extract-nodes-from-edge-rule\n  [edge]\n  (let [node-from-id (get-in edge [1 1 1 1])\n        node-from-type (type-str->type (get-in edge [1 1 0]))\n        node-to-type   (type-str->type (get-in edge [2 1 0]))\n        node-to-id   (get-in edge [2 1 1 1])]\n    [{node-from-id {:type node-from-type :edges-to {:nameless #{node-to-id}}}}\n     {node-to-id {:type node-to-type :edges-from {:nameless #{node-from-id}}}}]))\n\n;; (defn  graph-ast->dot-graph\n;;   [graph-ast]\n;;   (->> graph-ast\n;;     (filter #(= \"edge\" (first %)))\n;;     (mapv edge->dot-graph-line)\n;;     (apply str)\n;;     (#(str \"dinetwork {\"%\"}\"))\n;;     (#(do (tap> \"a2\") (tap> %) %))))\n;; (re-frame/reg-sub\n;;   ::dot-graph\n;;   :<- [::graph-ast]\n;;   graph-ast->dot-graph)\n\n(defn find-visible\n  ([visibles nodes-map node] (find-visible #{} #{} #{} visibles nodes-map node))\n  ([result to-visit visited visibles nodes-map node]\n   (let [new-visited (conj visited node)\n         parent-node (:parent (nodes-map node))\n         node-labels (:label (nodes-map node))\n         new-to-visit (-> to-visit\n                        (conj parent-node)\n                        (clojure.set/union node-labels)\n                        (clojure.set/difference visited))\n         new-result (if (visibles node)\n                      (conj result node)\n                      result)]\n     (if (seq new-to-visit)\n       (find-visible new-result new-to-visit new-visited visibles nodes-map (first to-visit))\n       new-result))))\n\n(defn visible-nodes\n  [fold-list]\n  (->> fold-list\n    (remove :opened?)\n    (remove :hidden?)\n    (map :node-id)\n    (set)))\n(re-frame/reg-sub\n  ::visible-nodes\n  :<- [::fold-list]\n  visible-nodes)\n(re-frame/reg-flow\n  {:id :f-visible-nodes\n   :inputs {:fold-list (re-frame/flow<- :f-fold-list)}\n   :output (fn [{:keys [fold-list]}] (visible-nodes fold-list))\n   :path [:ui :f-visible-nodes]})\n\n(defn selected-nodes\n  [[hovered-node clicked-nodes nodes-map]]\n  (if (empty? hovered-node)\n    clicked-nodes\n    (->> nodes-map\n      (filter #(contains? hovered-node (first %)))\n      (map second)\n      (reduce #(clojure.set/union (:children %2) %1) #{})\n      (clojure.set/union hovered-node))))\n(re-frame/reg-sub\n  ::selected-nodes\n  :<- [::hovered-node]\n  :<- [::clicked-nodes]\n  :<- [::nodes-map]\n  selected-nodes)\n(re-frame/reg-flow\n  {:id :f-selected-nodes\n   :inputs {:hovs [:ui :hovered-node]\n            :clks [:ui :clicked-nodes]\n            :nmap [:domain :nodes-map]}\n   :output (fn [{:keys [hovs clks nmap]}]\n             (selected-nodes [(or hovs #{})\n                              (or clks #{})\n                              nmap]))\n   :path [:ui :f-selected-nodes]})\n\n(defn selected-nodes-visible\n  [[selected-nodes visible-nodes]]\n  (clojure.set/intersection selected-nodes visible-nodes))\n(re-frame/reg-sub\n  ::selected-nodes-visible\n  :<- [::selected-nodes]\n  :<- [::visible-nodes]\n  selected-nodes-visible)\n\n(defn selected-node?\n  [selected-nodes [_ node]]\n  (contains? selected-nodes node))\n(re-frame/reg-sub\n  ::selected-node?\n  :<- [::selected-nodes]\n  selected-node?)\n\n(defn text->color [text]\n  (case (mod (hash text) 50)\n  ;; Greens\n    0 \"#31711c\"\n    1 \"#58a73e\"\n    2 \"#4ca72e\"\n    3 \"#308b12\"\n    4 \"#256311\"\n    5 \"#204b12\"\n    6 \"#234518\"\n    7 \"#2f4d26\"\n    8 \"#466d3a\"\n    9 \"#5b9549\"\n  ;; Purples\n    10 \"#762974\"\n    11 \"#551653\"\n    12 \"#532051\"\n    13 \"#6b3269\"\n    14 \"#954692\"\n    15 \"#af46ab\"\n    16 \"#b336ae\"\n    17 \"#a524a0\"\n    18 \"#8b1786\"\n    19 \"#5f105b\"\n  ;; Indigos\n    20 \"#061870\"\n    21 \"#04135f\"\n    22 \"#0b1a69\"\n    23 \"#152681\"\n    24 \"#1129a5\"\n    25 \"#041ea7\"\n    26 \"#0826c3\"\n    27 \"#1931b1\"\n    28 \"#1c3097\"\n    29 \"#19297b\"\n  ;; Yellows\n    30 \"#f7c545\"\n    31 \"#f7c031\"\n    32 \"#dbaa29\"\n    33 \"#c59c30\"\n    34 \"#c39f41\"\n    35 \"#cbaa52\"\n    36 \"#f1cb65\"\n    37 \"#b39648\"\n    38 \"#9d8033\"\n    39 \"#bd8f13\"\n  ;; Blues\n    40 \"#6b90bc\"\n    41 \"#73a1d7\"\n    42 \"#5980ad\"\n    43 \"#587597\"\n    44 \"#3e6695\"\n    45 \"#4f84c1\"\n    46 \"#629bdd\"\n    47 \"#65a9f7\"\n    48 \"#37567b\"\n    49 \"#4283d1\"))\n\n(def label-font-family \"Proza Libre\")\n\n(defn vis-data\n  [[visible-nodes nodes-map]]\n  (let [nodes (->> nodes-map\n                (filter #(visible-nodes (first %)))\n                (into {}))\n        ->node\n        (fn [[node-id\n              {{:strs [x y]} :position\n               :keys [type name]\n               :or {name node-id}}]]\n          {:id node-id\n           :label (if (= type :label)\n                    (str \"<b>\"name\"</b>\")\n                    name)\n           :shape \"box\"\n           :color {:background \"white\" :border \"gray\"}\n                   ;; :highlight {:border \"#ff0000\"}}\n           :x x :y y\n           :margin 7\n           :shadow true\n           :font\n           (when (= type :label)\n             {:face label-font-family\n              :multi \"html\"\n              :color (text->color node-id)})})\n\n        get-from-set #(find-visible visible-nodes nodes-map %)\n        get-to-set #(->> %\n                      (:edges-to)\n                      (map val) ;; TODO: get the text in the relationship/edge.\n                      (apply concat)\n                      (mapcat (partial find-visible visible-nodes nodes-map)))\n        ->edge\n        (fn [[k v]]\n          (for [from (get-from-set k)\n                to (get-to-set v)\n                :when (not= from to)]\n            {:from from :to to :arrows {:to {:enabled true :type \"arrow\"}}\n             :color {:highlight \"#33a0ff\"}}))]\n    {:nodes (map ->node nodes)\n     :edges (mapcat ->edge nodes-map)}))\n(re-frame/reg-sub\n  ::vis-data\n  :<- [::visible-nodes]\n  :<- [::nodes-map]\n  vis-data)\n(re-frame/reg-flow\n  {:id :f-vis-data\n   :inputs {:visible-nodes (re-frame/flow<- :f-visible-nodes)\n            :nodes-map (re-frame/flow<- :nodes-map)}\n   :output (fn [{:keys [visible-nodes nodes-map]}] (vis-data [visible-nodes nodes-map]))\n   :path [:ui :f-vis-data]})\n\n(defn left-panel-size\n  [app-state]\n  (get-in app-state [:ui :panels :left-panel-size] \"400px\"))\n(re-frame/reg-sub ::left-panel-size left-panel-size)\n\n(defn graph-text\n  [app-state]\n  (get-in app-state [:domain :graph-text] \"\"))\n(re-frame/reg-sub ::graph-text graph-text)\n\n(defn graph-ast\n  [app-state]\n  (get-in app-state [:ui :validation :valid-graph-ast]))\n(re-frame/reg-sub ::graph-ast graph-ast)\n\n(defn extract-nodes-from-foldable-rule\n  [foldable]\n  (let [foldable-id-name (get-in foldable [1 1 1 1])\n        foldable-type-str (get-in foldable [1 1 0])\n        foldable-type (type-str->type foldable-type-str)\n        label-or-parent (if (= :label foldable-type)\n                          {:label #{foldable-id-name}}\n                          {:parent foldable-id-name})\n        extract-node-info (fn [node]\n                            (let [id (get-in node [1 1 1])\n                                  type-str (get-in node [1 0])\n                                  type (type-str->type type-str)]\n                              {id (merge label-or-parent {:type type})}))\n        inner-nodes (map extract-node-info (drop 2 foldable))\n        foldable-id-node {foldable-id-name {:type foldable-type\n                                            :children (set (mapcat keys inner-nodes))\n                                            :foldable (if (seq inner-nodes) true false)\n                                            :parent :global}}]\n    (apply merge foldable-id-node inner-nodes)))\n\n(defn deep-merge-with\n  \"Code extracted from https://clojuredocs.org/clojure.core/merge-with#example-5b80843ae4b00ac801ed9e74\n  Like merge-with, but merges maps recursively, applying the given fn\n  only when there's a non-map at a particular level.\n  (deep-merge-with + {:a {:b {:c 1 :d {:x 1 :y 2}} :e 3} :f 4}\n                     {:a {:b {:c 2 :d {:z 9} :z 3} :e 100}})\n  -> {:a {:b {:z 3, :c 3, :d {:z 9, :x 1, :y 2}}, :e 103}, :f 4}\"\n  [f & maps]\n  (apply\n    (fn m [& maps]\n      (if (every? map? maps)\n        (apply merge-with m maps)\n        (apply f maps)))\n    maps))\n\n(defn merge-nodes\n  \"union for the set of labels and merge the rest\"\n  [nodes]\n  (apply deep-merge-with\n         (fn [res latter]\n           (if (set? res)\n             (clojure.set/union res latter)\n             latter))\n   nodes))\n\n;; This could be optimized as I don't need to process nodes that are closed (maybe change how the graph is defined)\n;; This is good enough for MVP, but there's a problem if I have a cycle or depending on the order of the definition, for instance the graph-text\n;; =>label5:\n;;   =>label6\n;; =>label6:\n;;   =>label5\n;; Should generate a structure like\n;; -=vlabel5\n;;  -=vlabel6\n;;   -=>label5\n;; -=vlabel6\n;;  -=vlabel5\n;;   -=>label6\n(defn nodes-hierarchy\n  [nodes-map]\n  (:global\n    (reduce\n      (fn [r [k v]]\n          (let [v (if-not (or (:parent v) (:label v))\n                    (assoc v :parent :global) ;; Add global as a parent of nodes that have edges, but are not in a label.\n                    v)\n                path (fn path\n                       ([cur-k cur-v] (conj (path cur-v) cur-k))\n                       ([cur]\n                        (if-let [parent (:parent cur)]\n                          (conj (path (nodes-map parent)) parent)\n                          [])))\n                ;; _ (tap> {:k k :path (path k v) :global? (if (and (not (:label v)) (not (:parent v))) :global (:parent v))})\n                to-assoc (get-in r (path k v) {})\n                with-node-assoced (assoc-in r (path k v) to-assoc)\n                with-its-labels-assoced (reduce\n                                          #(assoc-in %1 (conj (path %2 (nodes-map %2)) k) to-assoc)\n                                          with-node-assoced\n                                          (:label v))]\n            with-its-labels-assoced))\n      {} nodes-map)))\n\n(defn nodes-list\n  [path nodes-map fold-ui [node node-children]]\n  (let [opened? (when (seq node-children)\n                    (:opened? (fold-ui node) false))]\n    (cons {:node-id node\n           :node-type (:type (nodes-map node))\n           :path (conj path node)\n           :level (count path)\n           :color (text->color node)\n           :opened? opened?\n           :hidden? (:hidden? (nodes-map node))}\n          (when opened?\n            (mapcat #(nodes-list (conj path node) nodes-map (fold-ui node) %) node-children)))))\n\n(defn nodes-ui\n  [app-state]\n  (get-in app-state [:ui :nodes] {}))\n(re-frame/reg-sub ::nodes-ui nodes-ui)\n\n(defn fold-ui\n  [app-state]\n  (get-in app-state [:ui :fold] {}))\n(re-frame/reg-sub ::fold-ui fold-ui)\n\n;; TODO: Also sort by the order that it was mentioned\n;; TODO: Also sort inner structure\n(defn sort-nodes\n  [nodes-map nodes-hierarchy]\n  (sort-by (fn [[k _v]] (-> k nodes-map :type)) nodes-hierarchy))\n\n(defn nodes-map->fold-list\n  [[nodes-map fold-ui]]\n  (->> nodes-map\n    ;; (#(do (tap> {:nodes-map %}) %))\n    (nodes-hierarchy)\n    (sort-nodes nodes-map)\n    ;; (#(do (tap> {:nodes-hierarchy %}) %))\n    (mapcat #(nodes-list [] nodes-map fold-ui %))))\n    ;; (#(do (tap> {:nodes-list %}) %))))\n(re-frame/reg-sub\n  ::fold-list\n  :<- [::nodes-map]\n  :<- [::fold-ui]\n  nodes-map->fold-list)\n(re-frame/reg-flow\n  {:id :f-fold-list\n   :inputs {:nodes-map (re-frame/flow<- :nodes-map)\n            :fold-ui [:ui :fold]}\n   ;; :output (fn [{:keys [nodes-map fold-ui]}] (nodes-map->fold-list [(or nodes-map {}) (or fold-ui {})]))})\n   :output (fn [{:keys [nodes-map fold-ui]}] (nodes-map->fold-list [nodes-map fold-ui]))})\n   ;; :output (with-defaults nodes-map->fold-list [:nodes-map {} :fold-ui {}])})\n   ;; :path [:ui :f-fold-list]})\n\n(defn get-edn-string\n  ([all] (get-edn-string \"\" all))\n  ([acc [_ s :as all]]\n   (if (array? s)\n     (reduce get-edn-string acc (rest all))\n     (str acc s))))\n\n(defn extract-edn-props\n  [node-prop]\n  (let [node-id (get-in node-prop [1 1 1 1])\n        edn (get node-prop 2)]\n    [{node-id (cljs.reader/read-string (get-edn-string edn))}]))\n\n(defn no-memo-nodes-map*\n  [{:keys [graph-ast]}]\n  (let [nodes-from-edges (->> graph-ast\n                           (filter #(= \"edge\" (first %)))\n                           (mapcat extract-nodes-from-edge-rule))\n        node-props (->> graph-ast\n                     (filter #(= \"nodeProps\" (first %)))\n                     (mapcat extract-edn-props))]\n    (->> graph-ast\n      (filter #(= \"foldable\" (first %)))\n      (mapv extract-nodes-from-foldable-rule)\n      (concat nodes-from-edges)\n      (concat node-props)\n      (merge-nodes))))\n(def nodes-map* (memoize no-memo-nodes-map*))\n(re-frame/reg-flow\n {:id     :nodes-map*\n  :inputs {:graph-ast [:ui :validation :valid-graph-ast]}\n  :output nodes-map*\n  :path   [:domain :nodes-map*]})\n\n(re-frame/reg-flow\n {:id     :nodes-map\n  :inputs {:nodes-ui [:ui :nodes]\n           :nodes-map* (re-frame/flow<- :nodes-map*)}\n  :output (fn [{:keys [nodes-ui nodes-map*]}]\n            (deep-merge-with\n              (fn [res v]\n                (if (map? res)\n                  (merge res v)\n                  v))\n              nodes-map*\n              (select-keys nodes-ui (keys nodes-map*))))\n  :path   [:domain :nodes-map]})\n\n;; TODO: I can eventually replace the subs by flows.\n(defn nodes-map\n  [app-state]\n  (get-in app-state [:domain :nodes-map]))\n(re-frame/reg-sub ::nodes-map nodes-map)\n\n;; This one might be better as a reg-sub than a flow.\n(defn nodes-map-name\n  [nodes-map [_ node-id]]\n  (try\n    (tap> {:node-id node-id\n           :name (:name (nodes-map node-id))})\n    (:name (nodes-map node-id))\n    (catch :default _\n      nil)))\n(re-frame/reg-sub\n  ::nodes-map-name\n  :<- [::nodes-map]\n  nodes-map-name)\n\n(defn foldable?\n  [nodes-map [_ node]]\n  ;; (tap> {:c7 nodes-map})\n  (-> node nodes-map :foldable))\n(re-frame/reg-sub\n  ::foldable-node?\n  :<- [::nodes-map]\n  foldable?)\n\n(defn valid-graph?\n  [app-state]\n  (get-in app-state [:ui :validation :valid-graph?] false))\n(re-frame/reg-sub ::valid-graph? valid-graph?)\n\n(defn hovered-node\n  [app-state]\n  (get-in app-state [:ui :hovered-node] #{}))\n(re-frame/reg-sub ::hovered-node hovered-node)\n\n(defn vis-option-hierarchy\n  [app-state]\n  (get-in app-state [:ui :vis-options :layout :hierarchical :enabled] false))\n(re-frame/reg-sub ::vis-option-hierarchy vis-option-hierarchy)\n\n(defn vis-view\n  [app-state]\n  (get-in app-state [:ui :vis-view] nil))\n(re-frame/reg-sub ::vis-view vis-view)\n\n;; (defn mouse-select-mode-sub\n;;   [app-state]\n;;   (get-in app-state [:ui :mouse-select-mode] false))\n;; (re-frame/reg-sub ::mouse-select-mode mouse-select-mode-sub)\n(re-frame/reg-sub\n  ::mouse-select-mode\n  :-> #(get-in % [:ui :mouse-select-mode] false))\n\n(defn clicked-nodes\n  [app-state]\n  (get-in app-state [:ui :clicked-nodes] #{}))\n(re-frame/reg-sub ::clicked-nodes clicked-nodes)\n\n(defn hidden-nodes\n  [nodes-ui]\n  (some->> nodes-ui\n    (filter #(:hidden? (second %)))\n    (map first)))\n(re-frame/reg-sub\n  ::hidden-nodes\n  :<- [::nodes-ui]\n  hidden-nodes)\n\n(defn show-unhide-button?\n  [[selected-nodes hidden-nodes]]\n  (and hidden-nodes\n       (> (count selected-nodes) 1)\n       (seq (clojure.set/intersection\n              (set selected-nodes)\n              (set hidden-nodes)))))\n(re-frame/reg-sub\n  ::show-unhide-button?\n  :<- [::selected-nodes]\n  :<- [::hidden-nodes]\n  show-unhide-button?)\n\n(defn show-expand-button?\n  [{:keys [selected-nodes fold-list]}]\n  (->> fold-list\n    (filter #(-> % :opened? false?))\n    (map :node-id)\n    (set)\n    (clojure.set/intersection (set selected-nodes))\n    (seq)))\n(re-frame/reg-flow\n  {:id :f-show-expand-button?\n   :inputs {:selected-nodes (re-frame/flow<- :f-selected-nodes)\n            :fold-list (re-frame/flow<- :f-fold-list)}\n   :output show-expand-button?\n   :path [:ui :f-show-expand-button?]})\n\n(defn nodes-map->graph-text-reduce-step\n  [nodes-map]\n  (fn [[children edges props] [node-k* node-v]]\n    (let [rename-if-label #(if (= :label (:type (get nodes-map % {}))) (str \"=>\"%) %)\n          node-k (rename-if-label node-k*)\n          node-children (seq (map rename-if-label (:children node-v)))\n          edges-to (->> node-v :edges-to vals (map vec) flatten (map rename-if-label) seq)\n          custom-props (dissoc node-v :type :edges-to :edges-from :label :children :foldable :parent :hidden?)\n          custom-props* (select-keys node-v [:name :position])\n          _ (assert (= custom-props custom-props*)\n                    (str \"Some new node property was added, so should it be included in the text model or not?\\nThe difference was \"(clojure.data/diff custom-props custom-props*)))]\n      [(if node-children\n         (apply str (flatten (concat [children node-k \":\\n\"] (map #(str \"  \"%\"\\n\") node-children) [\"\\n\"])))\n         children)\n       (if edges-to\n         (apply str (flatten (concat [edges] (map #(str node-k\" -> \"%\"\\n\") edges-to))))\n         edges)\n       (if (seq custom-props)\n         (str props node-k\" \"custom-props\"\\n\")\n         props)])))\n(defn nodes-map->graph-text\n  [[nodes-map]]\n  (->> nodes-map\n    (reduce (nodes-map->graph-text-reduce-step nodes-map) [\"\" \"\" \"\"])\n    ((fn [[children edges props]]\n       (str children edges\"\\n\"props)))))\n(re-frame/reg-flow\n  {:id :ui-graph-text\n   :inputs {:nodes-map (re-frame/flow<- :nodes-map)}\n   :output (with-defaults nodes-map->graph-text [:nodes-map {}])\n   :path [:ui :graph-text]})\n\n;; This would be an example of a layer 2 reg-flow instead of reg-sub\n;; Does it make sense to use it like this instead of a subscription? \ud83e\udd37\n(re-frame/reg-flow\n  {:id :f-editing-graph-text\n   :inputs {:editing-graph-text [:ui :editing-graph-text]}\n   :output (with-defaults first [:editing-graph-text false])\n   :path [:ui :editing-graph-text]})\n\n;; DO NOT create new reg-subs, use reg-flow instead!\n\n;; ---- Events ----\n\n(defn resizing-panels\n  [app-state [_event new-state]]\n  (assoc-in app-state [:ui :panels :resizing-panels] new-state))\n(re-frame/reg-event-db ::resizing-panels resizing-panels)\n\n(defn mouse-moved\n  [app-state [_event x _y]]\n  (let [resizing-panels? (get-in app-state [:ui :panels :resizing-panels])]\n    (cond-> app-state\n      resizing-panels?\n      (assoc-in [:ui :panels :left-panel-size] (str x\"px\")))))\n(re-frame/reg-event-db ::mouse-moved mouse-moved)\n\n(def memo-graph-ast (memoize graph-parser/graph-ast))\n\n;; TODO\n;; The [:ui :nodes-position] is set when using the event ::set-nodes-positions,\n;; but I left it there as an alternative behavior and I still need to decide if\n;; it's worth keeping it.\n(defn set-graph-text\n  [app-state [_event v]]\n  (try (-> v (memo-graph-ast) (#(into {:graph-ast %})) (nodes-map*))\n       (-> app-state\n         (update-in [:ui :nodes] #(merge-with merge % (get-in app-state [:ui :nodes-positions] {})))\n         (assoc-in [:domain :graph-text] v)\n         (assoc-in [:ui :validation :valid-graph-ast] (memo-graph-ast v))\n         (assoc-in [:ui :validation :valid-graph?] true))\n       (catch :default _\n         (-> app-state\n           (assoc-in [:domain :graph-text] v)\n           (assoc-in [:ui :validation :valid-graph?] false)))))\n(re-frame/reg-event-db ::set-graph-text [event-to-analytics] set-graph-text)\n\n(defn toggle-open-close\n  [app-state [_event path]]\n  (-> app-state\n    (update-in [:ui :nodes] #(merge-with merge % (get-in app-state [:ui :nodes-positions] {})))\n    (update-in (concat [:ui :fold] path [:opened?]) not)))\n\n(defn nodes-list-item-clicked\n  [app-state [event path]]\n  (let [toggly-add #(set/difference (set/union %1 %2) (set/intersection %1 %2))]\n    (if (get-in app-state [:ui :mouse-select-mode] false)\n      (update-in app-state [:ui :clicked-nodes] #(toggly-add (set %) #{(last path)}))\n      (toggle-open-close app-state [event path]))))\n(re-frame/reg-event-db\n  ::nodes-list-item-clicked\n  [event-to-analytics]\n  nodes-list-item-clicked)\n\n(defn round-by [step pos]\n  (* step (js/Math.round (/ pos step))))\n\n(defn set-nodes-positions\n  [app-state [_event dragging? nodes-positions*]]\n  (if dragging?\n    app-state\n    (let [nodes-positions (reduce-kv (fn [m k {:strs [x y]}]\n                                       (assoc m k {:position {\"x\" x \"y\" y}}))\n                                     {}\n                                     nodes-positions*)]\n      ;; (tap> {:set-pos nodes-positions})\n      (-> app-state\n        (assoc-in [:ui :graph-dragging?] dragging?)\n        (update-in [:ui :nodes-positions] #(merge-with merge % nodes-positions))))))\n(re-frame/reg-event-db ::set-nodes-positions [event-to-analytics] set-nodes-positions)\n\n(defn set-vis-view\n  [app-state [_event {:keys [view-position scale]}]]\n  (assoc-in app-state [:ui :vis-view] {:position view-position :scale scale}))\n(re-frame/reg-event-db ::set-vis-view set-vis-view)\n\n(defn set-nodes-positions-hierarchy\n  \"Set the nodes positions, but differently of `set-nodes-positions`, it's\n  triggered every time the drag ends and as a side effect the zoom is reset \ud83d\ude15\"\n  [app-state [event {:keys [dragging? nodes-positions* _view-position _scale] :as args}]]\n  (if dragging?\n    app-state\n    (let [nodes-positions (reduce-kv (fn [m k {:strs [x y]}]\n                                       (assoc m k {:position {\"x\" x \"y\" (round-by 100 y)}}))\n                                     {}\n                                     nodes-positions*)]\n      ;; (tap> {:set-pos nodes-positions})\n      (-> app-state\n        (assoc-in [:ui :graph-dragging?] dragging?)\n        (update-in [:domain :nodes-map] #(merge-with merge % nodes-positions))\n        (set-vis-view [event args])))))\n(re-frame/reg-event-db ::set-nodes-positions-hierarchy [event-to-analytics] set-nodes-positions-hierarchy)\n\n(defn clear-nodes-positions\n  [app-state]\n  (update-in app-state [:domain :nodes-map] #(into {} (for [[k v] %] {k (dissoc v :position)}))))\n(re-frame/reg-event-db ::clear-nodes-positions [event-to-analytics] clear-nodes-positions)\n\n(defn drag-changed\n  [app-state [_event dragging?]]\n  (assoc-in app-state [:ui :graph-dragging?] dragging?))\n(re-frame/reg-event-db ::drag-changed [event-to-analytics] drag-changed)\n\n(defn toggle-hidden\n  [app-state [_event node-id]]\n  ;; (tap> {:c3 (get-in app-state [:ui :nodes])})\n  (-> app-state\n    (update-in [:ui :nodes] #(merge-with merge % (get-in app-state [:ui :nodes-positions] {})))\n    (update-in [:ui :nodes node-id :hidden?] not)))\n(re-frame/reg-event-db ::toggle-hidden [event-to-analytics] toggle-hidden)\n\n(defn node-hovered\n  [app-state [_event nodes-ids]]\n  ;; (tap> {:node-hovered node-id})\n  (assoc-in app-state [:ui :hovered-node] nodes-ids))\n(re-frame/reg-event-db ::node-hovered node-hovered)\n\n(defn debug-event\n  [app-state [_event path value]]\n  (assoc-in app-state path value))\n(re-frame/reg-event-db ::debug-event debug-event)\n\n(defn organize-hierarchy-positions\n  [app-state [_event v]]\n  (assoc-in app-state [:ui :vis-options :layout :hierarchical :enabled] v))\n(re-frame/reg-event-db ::organize-hierarchy-positions [event-to-analytics] organize-hierarchy-positions)\n\n(defn organize-hierarchy-positions-step-2\n  [app-state [event nodes-positions]]\n  (if (vis-option-hierarchy app-state)\n    (-> app-state\n      (set-nodes-positions-hierarchy [event {:dagging? false\n                                             :nodes-positions* nodes-positions\n                                             :view-position (get-in app-state [:ui :vis-view :position])\n                                             :scale (get-in app-state [:ui :vis-view :scale])}])\n      (assoc-in [:ui :vis-options :layout :hierarchical :enabled] false))\n    app-state))\n(re-frame/reg-event-db ::organize-hierarchy-positions-step-2 organize-hierarchy-positions-step-2)\n\n(defn hide-all-or-selected\n  [app-state]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        all-nodes (-> app-state (get-in [:domain :nodes-map] {}) (keys))\n        nodes-to-unhide (if (seq selected-nodes) selected-nodes all-nodes)\n        hidden (->> nodes-to-unhide\n                 (map (fn [node-id] {node-id {:hidden? true}}))\n                 (into {}))]\n    (update-in app-state [:ui :nodes] merge hidden)))\n(re-frame/reg-event-db ::hide-all-or-selected [event-to-analytics] hide-all-or-selected)\n\n(defn show-selected\n  [app-state]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        unhidden (->> selected-nodes\n                   (map (fn [node-id] {node-id {:hidden? false}}))\n                   (into {}))]\n    (update-in app-state [:ui :nodes] merge unhidden)))\n(re-frame/reg-event-db ::show-selected [event-to-analytics] show-selected)\n\n(defn collapse-all-or-selected\n  [app-state]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        all-nodes (-> app-state (get-in [:domain :nodes-map] {}) (keys))\n        nodes-to-collapse (if (seq selected-nodes) selected-nodes all-nodes)\n        closed (->> nodes-to-collapse\n                 (map (fn [node-id] {node-id {:opened? false}}))\n                 (into {}))]\n    (update-in app-state [:ui :fold] merge closed)))\n(re-frame/reg-event-db ::collapse-all-or-selected [event-to-analytics] collapse-all-or-selected)\n\n(defn expand-selected\n  [app-state]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        opened (->> selected-nodes\n                 (map (fn [node-id] {node-id {:opened? true}}))\n                 (into {}))]\n    (update-in app-state [:ui :fold] merge opened)))\n(re-frame/reg-event-db ::expand-selected [event-to-analytics] expand-selected)\n\n(defn mouse-select-mode-evt\n  [app-state [_event state]]\n  (assoc-in app-state [:ui :mouse-select-mode] state))\n(re-frame/reg-event-db ::mouse-select-mode [event-to-analytics] mouse-select-mode-evt)\n\n(defn network-clicked\n  [app-state [_event click-event]]\n  (let [toggly-add #(set/difference (set/union %1 %2) (set/intersection %1 %2))]\n    (if (get-in app-state [:ui :mouse-select-mode] false)\n      (update-in app-state [:ui :clicked-nodes] #(toggly-add (set %) (set ^js(.-nodes click-event))))\n      (assoc-in app-state [:ui :clicked-nodes] (set ^js(.-nodes click-event))))))\n(re-frame/reg-event-db ::network-clicked [event-to-analytics] network-clicked)\n\n(defn toggle-edit-graph-text-area\n  [app-state]\n  (update-in app-state [:ui :editing-graph-text] not))\n(re-frame/reg-event-db ::toggle-edit-graph-text-area [event-to-analytics] toggle-edit-graph-text-area)\n\n(comment\n  (require '[re-frame.db])\n  (clojure.set/union #{1 2} #{3 4})\n  (->> @re-frame.db/app-db\n    (#(get-in % [:domain :nodes-map]))\n    (filter #(#{\"FilhosDeMinervinaEElpidio\"} (first %)))\n    (map second)\n    (mapcat :children)\n    (concat #{\"FilhosDeMinervinaEElpidio\"}))\n    ;; (first))\n  (->> @re-frame.db/app-db\n    (#(get-in % [:domain :nodes-map]))\n    (map (fn [[k {:keys [position]}]]\n           {k [(get position \"x\") (get position \"y\")]}))\n    (into {})))\n\n;; ---- Views ----\n\n;; (defn draw-graph-no-memo [id data options]\n;;   (fn []\n;;     (let [container (-> js/document (.getElementById id))\n;;           network (-> js/vis .-Network (new container data options))]\n;;       ;; (.on network \"dragEnd\" #(>evt [::set-vis-nodes-positions ^Object (.getPositions network)]) )\n;;       (def network network)\n;;       network)))\n;;\n;; (def draw-graph (memoize draw-graph-no-memo))\n\n(defonce network (atom nil))\n\n(defn graph-component-inner []\n  (let [graph-component-id \"looset-graph\"\n        ;; options #js {:layout #js {:hierarchical #js {:enabled true\n        ;;                                              :sortMethod \"directed\"\n        ;;                                              :shakeTowards \"roots\"\n        ;;                                              :nodeSpacing 100}}\n        ;;              :physics #js {:enabled false}\n        ;;                            ;; :minVelocity 1.2}\n        ;;              :nodes #js {:borderWidth 1}}\n        update-comp (fn [component [_ prev-props]]\n                      (let [prev-vis-data (:vis-data prev-props)\n                            {:keys [selected-nodes vis-data options view]} (reagent/props component)]\n                        ;; (def network network)\n                        ^js (.setOptions @network options)\n                        ;; (tap> {:vis-data vis-data})\n                        (when (not= prev-vis-data vis-data)\n                          (.setData @network (clj->js vis-data)))\n                        (when view\n                          (.moveTo @network #js {:position (:position view)\n                                                 :scale (:scale view)}))\n                        (.selectNodes @network selected-nodes)))\n        mount-comp (fn [component]\n                     (let [container (-> js/document (.getElementById graph-component-id))]\n                       (reset! network (-> js/vis .-Network (new container nil #_options))))\n                     (.on @network \"dragStart\" #_(js/console.log \"dragStart\") #(>evt [::drag-changed true]))\n                     (.on @network \"dragEnd\" #(>evt [::set-nodes-positions-hierarchy {:dragging? false\n                                                                                      :nodes-positions* (js->clj ^Object (.getPositions @network))\n                                                                                      :view-position ^Object (.getViewPosition @network)\n                                                                                      :scale ^Object (.getScale @network)}]))\n                     (.on @network \"zoom\" #(>evt [::set-vis-view {:view-position ^Object (.getViewPosition @network)\n                                                                  :scale ^Object (.getScale @network)}]))\n                     (.on @network \"stabilized\" #_(js/console.log \"stabilized\") #(>evt [::set-nodes-positions (js->clj ^Object (.getPositions @network))])) ;; Used when physics is enabled.\n                     (.on @network \"afterDrawing\" #_(js/console.log \"configChange\")\n                          ;; For some reason (specific to visjs) if I don't give this\n                          ;; extreme little time extra to organize the graph, it\n                          ;; settles with x positions much sparser, might be a hacky\n                          ;; solution and this timeout might depend on the environment,\n                          ; ;but it's working for now.\n                          #(js/setTimeout (fn [] (>evt [::organize-hierarchy-positions-step-2 (js->clj ^Object (.getPositions @network))]))\n                                          20))\n                     (.on @network \"click\" #(do ^js (.-nodes %)\n                                                (>evt [::network-clicked %])))\n                                                ;; (.selectNodes @network #js[\"node1\" \"node5\"])))\n                     (update-comp component nil))]\n    (reagent/create-class\n      {:reagent-render (fn []\n                         [:div\n                          {:id graph-component-id\n                           :style #js {:height \"100%\" :width \"100%\"\n                                       :opacity (if (<sub [::valid-graph?]) \"100%\" \"40%\")}}\n                          [:p \"Loading..\"]])\n       :component-did-mount mount-comp\n       :component-did-update update-comp})))\n\n(defn graph-component []\n  [graph-component-inner\n   {:selected-nodes (clj->js (<sub [::selected-nodes-visible]))\n    :vis-data       @(re-frame/sub :flow {:id :f-vis-data})\n    :number-input (<sub [::number-input])\n    :view (<sub [::vis-view])\n    :options #js {:layout #js {:hierarchical #js {:enabled (<sub [::vis-option-hierarchy])\n                                                  :direction \"UD\"\n                                                  :sortMethod \"directed\"\n                                                  :shakeTowards \"roots\"}}\n                                                  ;; :nodeSpacing (int (<sub [::number-input]))}}\n                  :physics #js {:enabled false\n                                :hierarchicalRepulsion #js {:avoidOverlap 1\n                                                            :nodeDistance 300}}\n                  ;; :minVelocity 1.2}\n                  :nodes #js {:borderWidth 1}}}])\n\n    ;; :options #js {:physics #js {:enabled true\n    ;;                             :minVelocity 1.5}\n    ;;               :nodes #js {:borderWidth 1}}}])\n    ;;\n\n(defn panel-splitter []\n  [:div {:style {:display \"flex\"\n                 :justify-content \"center\"\n                 :width \"6px\"\n                 :height \"100vh\"\n                 :cursor \"ew-resize\"}\n         :onMouseDown #(>evt [::resizing-panels true])}\n   [:div {:style {:border-left \"1px solid gray\"}}]])\n\n(defn botton-buttons []\n  [:div\n   {:style {:display \"flex\"\n            :justify-content \"space-evenly\"\n            :padding \"10px\"}}\n   [:button.button-1\n    {:title \"edit graph\"\n     :onClick #(>evt [::toggle-edit-graph-text-area])}\n    [:svg\n     {:width \"30\" :height \"30\" :fill \"currentColor\" :viewBox \"0 0 16 16\" :xmlns \"http://www.w3.org/2000/svg\"}\n     [:path {:fill-rule \"evenodd\" :d \"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"}]\n     [:path {:fill-rule \"evenodd\" :d \"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z\"}]]]\n   [:a {:target \"_blank\" :href \"https://docs.google.com/forms/d/e/1FAIpQLSc5SouA_vEHW8jqYrbt7IASidgaTngEwlclkrgeQ6RQXzM5nA/viewform?usp=sf_link\"}\n    [:button.button-1\n     {:title \"Feedback\"}\n     [:svg\n      {:width \"30\" :height \"30\" :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n      [:path {:d \"M6.956 14.534c.065.936.952 1.659 1.908 1.42l.261-.065a1.378 1.378 0 0 0 1.012-.965c.22-.816.533-2.512.062-4.51.136.02.285.037.443.051.713.065 1.669.071 2.516-.211.518-.173.994-.68 1.2-1.272a1.896 1.896 0 0 0-.234-1.734c.058-.118.103-.242.138-.362.077-.27.113-.568.113-.856 0-.29-.036-.586-.113-.857a2.094 2.094 0 0 0-.16-.403c.169-.387.107-.82-.003-1.149a3.162 3.162 0 0 0-.488-.9c.054-.153.076-.313.076-.465a1.86 1.86 0 0 0-.253-.912C13.1.757 12.437.28 11.5.28H8c-.605 0-1.07.08-1.466.217a4.823 4.823 0 0 0-.97.485l-.048.029c-.504.308-.999.61-2.068.723C2.682 1.815 2 2.434 2 3.279v4c0 .851.685 1.433 1.357 1.616.849.232 1.574.787 2.132 1.41.56.626.914 1.28 1.039 1.638.199.575.356 1.54.428 2.591z\"}]]\n     [:svg\n      {:width \"30\" :height \"30\" :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n      [:path {:d \"M6.956 1.745C7.021.81 7.908.087 8.864.325l.261.066c.463.116.874.456 1.012.965.22.816.533 2.511.062 4.51a9.84 9.84 0 0 1 .443-.051c.713-.065 1.669-.072 2.516.21.518.173.994.681 1.2 1.273.184.532.16 1.162-.234 1.733.058.119.103.242.138.363.077.27.113.567.113.856 0 .289-.036.586-.113.856-.039.135-.09.273-.16.404.169.387.107.819-.003 1.148a3.163 3.163 0 0 1-.488.901c.054.152.076.312.076.465 0 .305-.089.625-.253.912C13.1 15.522 12.437 16 11.5 16H8c-.605 0-1.07-.081-1.466-.218a4.82 4.82 0 0 1-.97-.484l-.048-.03c-.504-.307-.999-.609-2.068-.722C2.682 14.464 2 13.846 2 13V9c0-.85.685-1.432 1.357-1.615.849-.232 1.574-.787 2.132-1.41.56-.627.914-1.28 1.039-1.639.199-.575.356-1.539.428-2.59z\"}]]]]])\n\n(defn svg-eye\n  [props]\n  [:svg#eye.hover-gray-svg\n   (merge\n     props\n     {:fill \"currentColor\" :viewBox \"0 0 16 16\" :xmlns \"http://www.w3.org/2000/svg\"})\n   [:path {:fill-rule \"evenodd\" :d \"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z\"}]\n   [:path {:fill-rule \"evenodd\" :d \"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z\"}]])\n\n(defn svg-filled-eye\n  [props]\n  [:svg#eye.hover-gray-svg\n   (merge\n     props\n     {:fill \"#4a484a\" :viewBox \"0 0 16 16\" :xmlns \"http://www.w3.org/2000/svg\"})\n   [:path {:fill-rule \"evenodd\" :d \"M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\"}]\n   [:path {:fill-rule \"evenodd\" :d \"M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z\"}]])\n\n(defn node-view\n  [{:keys [class]\n    {:keys [color]} :style\n    {:keys [level hidden? path node-id]} :node}\n   text]\n  (let [node-name (<sub [::nodes-map-name node-id])\n        selected-node? (<sub [::selected-node? node-id])\n        mouse-select-mode (<sub [::mouse-select-mode])\n        foldable-node? (<sub [::foldable-node? node-id])]\n    [:div\n     {:style {:paddingLeft (+ 5 (* 12 level))}\n      :class class\n      :onMouseOver #(>evt [::node-hovered #{node-id}])\n      :onMouseOut #(>evt [::node-hovered #{}])}\n     (if hidden?\n       [svg-eye\n        {:onClick #(>evt [::toggle-hidden node-id])\n         :style {:paddingRight 6}\n         :width \"27\" :height \"27\"}]\n       [svg-filled-eye\n        {:onClick #(>evt [::toggle-hidden node-id])\n         :style {:paddingRight 6}\n         :width \"27\" :height \"27\"}])\n     [:div\n      {:onClick #(>evt [::nodes-list-item-clicked path])\n       :class (str (when selected-node? \"selected-shadow \")\n                   (cond\n                     mouse-select-mode \"hover-gray select-mode-cursor\"\n                     foldable-node? \"hover-gray\"\n                     :else \"\"))\n       :style {:color (or color \"inherit\")}}\n      (or node-name text)]]))\n\n(defn svg-label\n  [{:keys [color opened?]}]\n  (let [rotation-degree (if opened? \"45\" \"0\")]\n    [:svg\n     {:width \"20.3125\" :height \"13\"\n      :transform (str \"rotate (\"rotation-degree\")\")\n      :viewBox (str \"20 0 15 32\")}\n     [:g\n      [:rect\n       {:fill color\n        :width \"26.326736\" :height \"27.940695\"\n        :x \"4\"\n        :y \"4\"\n        :ry \"3.7885695\"}]\n      [:path {:fill color\n              :d \"m 24,4 9.30351,0.007 13.81581,13.815798 -13.8158,14.110975 -11.32617,0.007\"}]]]))\n\n(defn svg-arrow-triangle\n  [{:keys [opened?]}]\n  (let [rotation-degree (if opened? \"0\" \"-90\")]\n    [:svg\n     {:width \"16\" :height \"16\" :viewBox \"0 0 16 16\" :fill \"#4a484a\"\n      :transform (str \"rotate (\"rotation-degree\")\")\n      :style {:verticalAlign \"middle\"}}\n     [:path {:d \"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"}]]))\n\n(defn label-node [{:keys [node-id color opened?] :as node-item}]\n  [node-view\n   {:node node-item\n    :class \"label-style\"\n    :style {:color color}}\n   [:<>\n     [svg-label {:opened? opened?\n                 :color color}]\n     node-id]])\n\n(defn lix-node [{:keys [node-id opened?] :as node-item}]\n  [node-view\n   {:node node-item\n    :class \"lix-style\"}\n   [:<>\n     (when-not (nil? opened?)\n       [svg-arrow-triangle {:opened? opened?}])\n     node-id]])\n\n(defn nodes-list-view []\n  [:div\n   {:style {:opacity (if (<sub [::valid-graph?]) \"100%\" \"40%\")}}\n   (for [node-item (<sub [::fold-list])\n         :let [node-type-comp ({:label label-node :lix lix-node} (:node-type node-item))]]\n     ;; ^{:key text} ;; Somehow I'm using this key wrongly, if it's uncomment, the items repeat depending on the change.\n     [node-type-comp node-item])])\n\n(def black-cursor-svg-path \"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\")\n\n(defn left-buttons []\n  (let [icons-size \"22\"]\n    [:div\n     {:style {:position \"relative\"\n              :height \"0px\"\n              :z-index \"10\"}}\n     [:div\n      {:style {:z-index \"10\"\n               :display \"flex\"\n               :flex-direction \"column\"\n               :align-items \"flex-start\"\n               :padding \"10px\"\n               :inline-size \"fit-content\"}}\n      [:button.button-2\n       {:title \"move\"\n        :onClick #(>evt [::mouse-select-mode false])}\n       [:svg\n        {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n        [:path {:fill-rule \"evenodd\" :d \"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103zM2.25 8.184l3.897 1.67a.5.5 0 0 1 .262.263l1.67 3.897L12.743 3.52z\"}]]]\n      [:button.button-2\n       {:title \"select\"\n        :onClick #(>evt [::mouse-select-mode true])}\n       [:svg\n        {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n        [:path {:fill-rule \"evenodd\" :d black-cursor-svg-path}]]]\n      [:div\n       {:style {:height \"2px\"\n                :width \"28px\"\n                :background-color \"#000000a1\"\n                :align-self \"center\"\n                :margin \"3px 0px\"}}]\n      [:button.button-2\n       {:title \"hierarchy layout\"\n        :onClick #(>evt [::organize-hierarchy-positions true])}\n       [:svg\n        {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n        [:path {:fill-rule \"evenodd\" :d \"M0 1.5A1.5 1.5 0 0 1 1.5 0h13A1.5 1.5 0 0 1 16 1.5v13a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 14.5zM1.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5H5V1zM10 15V1H6v14zm1 0h3.5a.5.5 0 0 0 .5-.5v-13a.5.5 0 0 0-.5-.5H11z\"}]]]\n      [:button.button-2\n       {:title \"default layout\"\n        :onClick #(>evt [::clear-nodes-positions])}\n       [:svg\n        {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n        [:path {:fill-rule \"evenodd\" :d \"M5 1v8H1V1zM1 0a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1zm13 2v5H9V2zM9 1a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM5 13v2H3v-2zm-2-1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1zm12-1v2H9v-2zm-6-1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1z\"}]]]\n      (if (<sub [::show-unhide-button?])\n        [:button.button-2\n         {:title \"show selected\"\n          :onClick #(>evt [::show-selected])}\n         [:svg\n           {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n           [:path {:fill-rule \"evenodd\" :d \"M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\"}]\n           [:path {:fill-rule \"evenodd\" :d \"M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z\"}]]]\n        [:button.button-2\n         {:title \"hide all\"\n          :onClick #(>evt [::hide-all-or-selected])}\n         [:svg\n          {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n          [:path {:fill-rule \"evenodd\" :d \"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z\"}]\n          [:path {:fill-rule \"evenodd\" :d \"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z\"}]]])\n      (if @(re-frame/sub :flow {:id :f-show-expand-button?})\n        [:button.button-2\n         {:title \"expand selected\"\n          :onClick #(>evt [::expand-selected])}\n         [:svg\n          {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n          [:path {:fill-rule \"evenodd\" :d \"M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8M7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10\"}]]]\n        [:button.button-2\n         {:title \"collapse all\"\n          :onClick #(>evt [::collapse-all-or-selected])}\n         [:svg\n          {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n          [:path {:fill-rule \"evenodd\" :d \"M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8zm7-8a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 4.293V.5A.5.5 0 0 1 8 0zm-.5 11.707-1.146 1.147a.5.5 0 0 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 11.707V15.5a.5.5 0 0 1-1 0v-3.793z\"}]]])]]))\n\n(def code-font-family \"dejavu sans mono, monospace\")\n(def code-font-size \"small\")\n(def code-margin \"0\")\n(def code-padding \"0 10px\")\n\n(defn edit-raw-graph-text []\n  [:textarea\n   {:style {:flex-grow \"1\"\n            :margin code-margin\n            :padding code-padding\n            :min-height \"20vw\"\n            :font-family code-font-family\n            :font-size code-font-size}\n    :onChange #(>evt [::set-graph-text (-> % .-target .-value)])\n    :value (<sub [::graph-text])}])\n\n(defn debug-quick-val-set []\n  [:<>\n    [:<>\n     [:span \"Range \"(<sub [::number-input])]\n     [:input {:type \"range\"\n              :value (<sub [::number-input])\n              :onChange #(>evt [::set-number-input (-> % .-target .-value)])}]]\n    [:<> [:span \"Number\"] [:input {:type \"number\"\n                                   :value (<sub [::number-input])\n                                   :onChange #(>evt [::set-number-input (-> % .-target .-value)])}]]\n    [:<> [:span \"Toggle\"] [:input {:type \"checkbox\"\n                                   :onChange #(do (>evt [::set-toggle-input (-> % .-target .-checked)])\n                                                  (>evt [::organize-hierarchy-positions (-> % .-target .-checked)]))}]]])\n\n(def quattrocento-font \"Quattrocento, serif\")\n\n(defn global-style []\n  [:style\n   (str \"\n   @import url('https://fonts.googleapis.com/css2?family=Proza+Libre:wght@400;500;600;700&family=Quattrocento&family=Roboto+Mono:wght@300;400;500;600;700&display=swap');\n\n    *::-webkit-scrollbar-track {\n        background: rgb(51 51 51 / 10%);\n    }\n    *::-webkit-scrollbar-thumb {\n        background: #bbb;\n    }\n    *::-webkit-scrollbar {\n        width: 5px;\n        height: 5px;\n    }\n\n   .hover-gray-svg:hover {\n     filter: drop-shadow(0px 2px 6px #0008);\n     cursor: pointer;\n   }\n\n   .hover-gray:hover {\n     text-shadow: -5px 3px 7px;\n     cursor: pointer;\n   }\n\n   .selected-shadow {\n     text-shadow: -5px 3px 7px #59d0e8;\n   }\n\n   .button-1 {\n     display: flex;\n     background-color: #4c4c4c;\n     border-radius: 8px;\n     border-style: none;\n     box-sizing: border-box;\n     color: #FFFFFF;\n     cursor: pointer;\n     font-family: \"quattrocento-font\";\n     font-size: 14px;\n     font-weight: 500;\n     line-height: 20px;\n     list-style: none;\n     margin: 0;\n     outline: none;\n     padding: 10px;\n     position: relative;\n     text-align: center;\n     text-decoration: none;\n     transition: color 100ms;\n     vertical-align: baseline;\n     user-select: none;\n     -webkit-user-select: none;\n     touch-action: manipulation;\n   }\n\n   .button-1:hover,\n   .button-1:focus {\n     background-color: #7c7c7c;\n   }\n\n   .button-2:active {\n     background-color: #00000020;\n   }\n\n   .button-2 {\n      background-color: #0000000d;\n      backdrop-filter: blur(3px);\n      border-radius: 8px;\n      border-style: solid;\n      border-width: 2px;\n      border-color: #000000a1;\n      box-sizing: border-box;\n      cursor: pointer;\n      padding: 4px;\n      margin: 4px 0px;\n      transition: color 100ms;\n      user-select: none;\n      -webkit-user-select: none;\n      touch-action: manipulation;\n   }\n\n   .lix-style {\n     display: flex;\n     flex-direction: row;\n     font-family: \"label-font-family\", sans-serif;\n     font-size: large;\n     padding-bottom: 10px;\n     align-items: center;\n     color: #4a484a;\n   }\n\n   .label-style {\n     display: flex;\n     flex-direction: row;\n     font-family: \"label-font-family\", sans-serif;\n     font-size: large;\n     font-weight: bold;\n     padding-bottom: 10px;\n     align-items: center;\n   }\n\n   .select-mode-cursor {\n     cursor: url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 16 16'%3E%3Cpath d='\"black-cursor-svg-path\"'/%3E%3C/svg%3E\\\" ) 19 0,crosshair !important;\n   }\n   \")])\n\n(defn main []\n  [:<>\n   [global-style]\n   [:div#panel-container\n    {:style {:display \"flex\"\n             :user-select \"none\"\n             :max-height \"100vh\"}}\n    [:div#left-panel\n     {:class (when (<sub [::mouse-select-mode])\n               \"select-mode-cursor\")\n      :style {:width (<sub [::left-panel-size])\n              :min-width \"20vw\"\n              :display \"flex\"\n              :flex-direction \"column\"}}\n     [:div {:style {:font-family quattrocento-font\n                    :font-size \"2em\"\n                    :padding \"10px\"\n                    :border-bottom \"1px solid gray\"}}\n      \"Looset Graph\"]\n     [left-buttons]\n     [util/error-boundary\n      {:if-error [:h2 \"erro\"]}\n      [graph-component]]]\n    [panel-splitter]\n    [:div#right-panel\n     {:style {:width (str \"calc(100vw - \"(<sub [::left-panel-size])\")\")\n              :overflow \"auto\"\n              :display \"flex\"\n              :flex-direction \"column\"\n              :min-width \"20vw\"}}\n     [:div#text-component\n       {:style {:overflow \"auto\"\n                :display \"grid\"\n                :flex-grow \"1\"\n                :padding \"7px 0\"}}\n       [util/error-boundary\n        {:if-error [:h2 \"erro\"]}\n        [nodes-list-view]]\n       (when @(re-frame/sub :flow {:id :f-editing-graph-text})\n         [edit-raw-graph-text])]\n     [botton-buttons]]]])\n     ;; [:div\n     ;;  (<sub [::fold-list])]\n     ;; [:div\n     ;;  (str @(re-frame/sub :flow {:id :f-editing-graph-text}))]]]])\n     ;; ;; This is for testing values in a fast way, can be plugged in different components.\n     ;; [debug-quick-val-set]]]])\n\n(defn set-toggle-input\n  [app-state [_event n]]\n  (assoc-in app-state [:ui :toggle-input] n))\n(re-frame/reg-event-db ::set-toggle-input set-toggle-input)\n\n(defn toggle-input\n  [app-state]\n  (get-in app-state [:ui :toggle-input] false))\n(re-frame/reg-sub ::toggle-input toggle-input)\n\n(defn set-number-input\n  [app-state [_event n]]\n  (assoc-in app-state [:ui :number-input] n))\n(re-frame/reg-event-db ::set-number-input set-number-input)\n\n(defn number-input\n  [app-state]\n  (get-in app-state [:ui :number-input] 0))\n(re-frame/reg-sub ::number-input number-input)\n\n;; ---- Initialization ----\n\n(def initial-state\n  {:domain {:graph-text \"=>label1:\\n  node1\\n  node2\\n  node5\\n\\n=>label2:\\n  node5\\n\\nnode3:\\n  node4\\n  node5\\n\\nnode1 -> node2\\nnode4->node1\\nnodeA->nodeB\"\n            :nodes-map {}}\n   :ui {:panels {:resizing-panels false\n                 :left-panel-size \"65vw\"}\n        :editing-graph-text false\n        :fold {}}})\n\n(defn gzip [cs-mode b-array]\n  (let [cs (-> \"gzip\" cs-mode.)\n        writer (-> cs .-writable .getWriter)]\n    (-> writer (.write b-array))\n    (-> writer .close)\n    (.arrayBuffer (js/Response. (-> cs .-readable)))))\n\n(defn gzip-compress [string]\n  (as-> string $\n    (.encode (js/TextEncoder.) $)\n    (gzip js/CompressionStream $)\n    (.then $ #(->> (js/Uint8Array. %)\n                (map char)\n                (apply str)))))\n\n(defn gzip-decompress [compressed-string]\n  (as-> compressed-string $\n    (map #(.charCodeAt % 0) $)\n    (js/Uint8Array. $)\n    (gzip js/DecompressionStream $)\n    (.then $ #(.decode (js/TextDecoder.) %))))\n\n(def set-url-state-interceptor\n  (re-frame.std-interceptors/on-changes\n    (fn [graph-text]\n      (.then (gzip-compress graph-text)\n             #(let [loc js/window.location]\n                (js/window.history.replaceState\n                  nil nil\n                  (str loc.origin loc.pathname\"?graph=\"\n                       (js/encodeURIComponent (js/btoa %)))))))\n    nil [:ui :graph-text]))\n(re-frame/reg-global-interceptor set-url-state-interceptor)\n\n(defn init-mousemove []\n  (js/document.body.addEventListener\n    \"mousemove\"\n    #(>evt [::mouse-moved (-> % .-x) (-> % .-y)])))\n\n(re-frame/reg-event-db\n  ::set-app-state\n  [event-to-analytics]\n  (fn [_ [event graph-text]]\n    (set-graph-text initial-state [event graph-text])))\n\n(defn init-state []\n  ;; (re-frame/dispatch-sync [::set-app-state (get-in initial-state [:domain :graph-text])]))\n  (let [compressed-graph (.get (js/URLSearchParams. js/window.location.search) \"graph\")\n        default-graph (get-in initial-state [:domain :graph-text])]\n    (if compressed-graph\n      (.then (gzip-decompress (js/atob compressed-graph))\n             #(re-frame/dispatch-sync [::set-app-state %]))\n      (re-frame/dispatch-sync [::set-app-state default-graph]))))\n\n;; Snippets about mouse-up event\n(defn mouse-up\n  [app-state]\n  (-> app-state\n    (resizing-panels [::mouse-up false])\n    (assoc-in [:ui :diagram :zooming?] false)))\n(re-frame/reg-event-db ::mouse-up mouse-up)\n(defn init-mouseup []\n  (js/document.body.addEventListener\n    \"mouseup\"\n    #(>evt [::mouse-up false])))\n\n;; Snippet on how to react on CSS change\n;; (defn init-style-observer []\n;;   (let [observer (new js/MutationObserver\n;;                    (fn [mutations]\n;;                      (js/console.log \"something changed\" mutations)))\n;;         target-element (js/document.getElementById \"text-component\")]\n;;     (.observe observer target-element #js{:attributes true :attributeFilter #js[\"style\"]})))\n\n(defn ^:dev/after-load mount-app-element []\n  (when ^boolean js/goog.DEBUG ;; Code removed in production\n    (re-frame/clear-subscription-cache!))\n  (when-let [el (.getElementById js/document \"root\")]\n    (reagent.dom/render [main] el)))\n\n(defn init []\n  (init-state)\n  (init-mousemove)\n  (mount-app-element)\n  (init-mouseup))\n  ;; (init-style-observer))\n"]}