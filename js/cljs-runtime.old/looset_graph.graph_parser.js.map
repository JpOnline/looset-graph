{"version":3,"sources":["looset_graph/graph_parser.cljs"],"mappings":";;;;AAMA,6CAAA,7CAAOA,kGACeC;AADtB,AAEE,IAAMC,QAAM,AAAaD;IACnBE,OAAM,AAAYF;AADxB,AAEE,GAAI,SAAA,RAAME;AAAV,kDAAA,uDAAA,2CAAA,8DAAA,XAEmB,AAAQD,oEACR,AAAUA;;AAH7B,kDAAA,uDAAA,2CAAA,8DAAA,8EAAA,mDAAA,2CAAA,6DAAA,pPAImB,AAAQA,oEACR,AAAUA,sKACV,AAAQC,mEACR,CAAG,AAAUA,cACV,AAACC,gBAAM,AAAQD;;;AAEzC,gCAAA,hCAAOE,wEACJC,KAAKC,WAAWC,YAAYC,UAAUC;AADzC,AAEE,GACE,GAAA,kBAAA,jBAAO,AAAYJ;AACnB,IAAMK,OAAS,AAACX,2CAAiBM;IAC3BM,OAAS,AAACC,4CAAIN,WAAW,AAAaD;IACtCQ,WAAS,AAACC,iDAAS,AAACC,6CAAK,4CAAA,WAAAC,vDAACC;AAAD,AAAM,kIAAAD,2GAAAA,rOAACZ,8DAAAA,+HAAAA,lDAAME,2GAAAA,hGAAWC,2GAAAA,/FAAYC,2GAAAA,jGAAUC,2GAAAA;IAC9C,AAACS,+CAAOC,uBACd,AAAYd;AAJrC,AAKE,GAAI,AAACe,0BAAUZ,UAAUG;AAAzB;;AAGE,OAACU,oBAAU,AAACC,eAAKX,KAAKE,UAAUH;;;AAVtC,GAYE,AAAwBL;AACxB,IAAMkB,QAAM,AAAclB;AAA1B,AACE,4SAAA,2CAAA,uDAAA,2CAAA,mEAAA,rfAACgB,oBAAU,KAAAG,eAAA,KAAA,0DAAA,KAAAA,eAAA,+IAAA,KAAA,IAAA,OAAA,IAAA,9JAAe,AAAA,uFAAU,4CAAKnB,kOACb,AAAUkB,yEACV,AAAwBA;;AAhBxD,AAmBE,IAAME,UAAQ,4CAAKpB;IACbqB,aAAW,AAACd,4CAAIL,YAAY,AAAQ,AAAUF;AADpD,AAEE,GAAU,AAACe,0BAAUX,cAAcgB;AAAnC;;AAAA,AAAA,0FACGC,WAAWD;;;;;;AAEpB,sCAAA,tCAAME,oFAAWC;AAAjB,AACE,IAAMC,OAAK,KAAK,AAAeC,uDAAQF;IACjCG,MAAI,KAAK,AAAeC,8DAAOH;IAC/BI,SAAO,KAAK,AAAqBH,6DAAQC;IACzCG,OAAK,KAAK,AAAeC,gEAAQF;IACjCG,IAAE,wBAAA,vBAAM,AAAmBF;IAC3B7B,OAAK,AAAqC6B;cALhD,iFAAA,UAAA,UAAA,/GAMMG;AANN,AAOE,OAACC,qBAAQ,qMAAA,rMAAClC,8BAAIC,KAAK,AAACkC,6CAAKC,kBAAQ,AAAgBN,gBAAO,AAACK,6CAAKC,kBAAQ,AAAiBN,sDAAWG","names":["looset-graph.graph-parser/parser-rule-meta","this","start","stop","cljs.core/count","looset-graph.graph-parser/ast","tree","rule-names","token-types","hide-tags","hide-literals","meta","rule","cljs.core.get","children","cljs.core.sequence","cljs.core.comp","p1__22976#","cljs.core.map","cljs.core.remove","cljs.core/nil?","cljs.core/contains?","cljs.core/with-meta","cljs.core/cons","token","cljs.core/List","content","token-type","looset-graph.graph-parser/graph-ast","graph-text","chrs","js/module$node_modules$antlr4$dist$antlr4_web","lxr","js/module$node_modules$loosetGraphLexer$loosetGraphLexer","tokens","prsr","js/module$node_modules$loosetGraphParser$loosetGraphParser","_","to-hide","cljs.core/clj->js","cljs.core.mapv","cljs.core/keyword"],"sourcesContent":["(ns looset-graph.graph-parser\n  (:require\n    [\"antlr4\" :as antlr4]\n    [\"loosetGraphLexer\" :as lexer]\n    [\"loosetGraphParser\" :as parser]))\n\n(defn- parser-rule-meta\n  [^ParserRuleContext this]\n  (let [start ^js (.-start this)\n        stop  ^js (.-stop this)]\n    (if (nil? stop)\n      ;; no end found - happens on errors\n      {:start {:row    (.-line start)\n               :column (.-column start)}}\n      {:start {:row    (.-line start)\n               :column (.-column start)}\n       :end   {:row    (.-line stop)\n               :column (+ (.-column stop)\n                          (count (.-text stop)))}})))\n\n(defn- ast\n  [tree rule-names token-types hide-tags hide-literals]\n  (cond\n    (some? (.-children tree))\n    (let [meta     (parser-rule-meta tree)\n          rule     (get rule-names (.-ruleIndex tree))\n          children (sequence (comp (map #(ast % rule-names token-types hide-tags hide-literals))\n                                   (remove nil?))\n                             (.-children tree))]\n      (if (contains? hide-tags rule)\n        nil\n        ;; attach meta data ... ala instaparse\n        (with-meta (cons rule children) meta)))\n\n    ^boolean (.-isErrorNode tree)\n    (let [token ^js (.-symbol tree)]\n      (with-meta (list :failure (:content (str tree)))\n                 {:start {:row    (.getLine token)\n                          :column (.getCharPositionInLine token)}}))\n\n    :else\n    (let [content (str tree)\n          token-type (get token-types (.-type (.-symbol tree)))]\n      (when-not (contains? hide-literals content)\n        [token-type content]))))\n\n(defn graph-ast [graph-text]\n  (let [chrs (new (.-InputStream antlr4) graph-text)\n        lxr (new (.-default ^js lexer) chrs)\n        tokens (new (.-CommonTokenStream antlr4) lxr)\n        prsr (new (.-default ^js parser) tokens)\n        _ (set! (.-buildParseTrees prsr) true)\n        tree ^js/LoosetGraphContext (.loosetGraph prsr)\n        to-hide #{\"->\" \":\" \"=>\"}]\n    (clj->js (ast tree (mapv keyword ^js(.-ruleNames prsr)) (mapv keyword (.-symbolicNames prsr)) #{} to-hide))))\n"]}