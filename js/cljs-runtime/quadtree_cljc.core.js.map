{"version":3,"sources":["quadtree_cljc/core.cljc"],"mappings":"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","names":["var_args","G__23302","quadtree-cljc.core/->quadtree","js/Error","bounds","max-objects","max-levels","quadtree_cljc.core.__GT_quadtree","level","objects","nodes","quadtree-cljc.core/->bounds","x","y","width","height","quadtree-cljc.core/total-nodes","quadtree","cljs.core/vector?","cljs.core.reduce","cljs.core/+","cljs.core.mapv","quadtree-cljc.core/split","map__23305","cljs.core/--destructure-map","cljs.core.get","map__23306","next-level","sub-width","sub-height","sub-quadtree","cljs.core.merge","cljs.core._EQ_","cljs.core/count","cljs.core.assoc","quadtree-cljc.core/get-quadrant","bounds-obj","map__23311","map__23312","default","qt-bounds","qt-x","qt-y","qt-width","qt-height","obj-x","obj-y","obj-width","obj-height","vertical-midpoint","horizontal-midpoint","top-quadrant","bottom-quadrant","left-quadrants","right-quadrants","quadtree-cljc.core/insert","map__23321","all-objects","cljs.core.conj","obj","quadrant","G__23324","G__23325","cljs.core.nth","p1__23319#","cljs.core.update","cljs.core/empty?","quadtree-cljc.core/insert-all","bounds-objs","quadtree-cljc.core/retrieve","G__23330","G__23331","p1__23328#","clojure.core.reducers.flatten","cljs.core.into","p__23332","map__23333","quadtree-cljc.core/point?","quadtree-cljc.core/retrieve-points","p1__23334#","cljs.core/filterv","quadtree-cljc.core/intersects?","obj-a","obj-b","map__23335","map__23336","x-a","y-a","width-a","height-a","x-b","y-b","width-b","height-b","max-x-for-a","max-y-for-a","max-x-for-b","max-y-for-b","quadtree-cljc.core/retrieve-intersections","p1__23337#"],"sourcesContent":["(ns quadtree-cljc.core\n  (:require [clojure.core.reducers :as r]))\n\n(defn ->quadtree\n  \"Returns a map representing a quadtree\"\n  ([bounds max-objects max-levels]\n   (->quadtree bounds max-objects max-levels 0 [] []))\n  ([bounds max-objects max-levels level objects nodes]\n   {:bounds bounds\n    :max-objects max-objects\n    :max-levels max-levels\n    :level level\n    :objects objects\n    :nodes nodes}))\n\n(defn ->bounds\n  \"Returns a map representing a bounding box\"\n  [x y width height]\n  {:x x :y y :width width :height height})\n\n(defn total-nodes\n  \"Returns the total number of sub-trees in `quadtree`. Valid\n  sub-trees have a vector as their value to the parent's :nodes\n  keyword.\"\n  [quadtree]\n  (let [nodes (:nodes quadtree)]\n    (if (vector? nodes)\n      (reduce + 1 (mapv total-nodes nodes))\n      0)))\n\n(defn split\n  \"Splits a `quadtree` created with `->quadtree` into\n  4 sub-nodes returns `quadtree` if this quadtree already\n  has four nodes. Returns nil if you passed the wrong type\n  or doesn't have the required keywords.\"\n  [quadtree]\n  (let [{:keys [nodes level bounds]} quadtree\n        {:keys [x y width height]} bounds\n        next-level (inc level)\n        sub-width (/ width 2)\n        sub-height (/ height 2)\n        sub-quadtree (fn sub-quadtree\n                       [quadtree x y width height level]\n                       (merge quadtree {:bounds {:x x\n                                                 :y y\n                                                 :width width\n                                                 :height height}\n                                        :level level\n                                        :objects []\n                                        :nodes []}))]\n    (if (= (count nodes) 4)\n      quadtree\n      (assoc quadtree\n             :nodes\n             [(sub-quadtree quadtree (+ x sub-width) y sub-width sub-height next-level)\n              (sub-quadtree quadtree x y sub-width sub-height next-level)\n              (sub-quadtree quadtree x (+ y sub-height) sub-width sub-height next-level)\n              (sub-quadtree quadtree (+ x sub-width) (+ y sub-height) sub-width sub-height next-level)]))))\n\n(defn get-quadrant\n  \"Determine the quadrant `bounds-obj` belongs to in `quadtree`\"\n  [quadtree bounds-obj]\n  (let [default -1\n        qt-bounds (:bounds quadtree)\n        {qt-x :x qt-y :y qt-width :width qt-height :height} qt-bounds\n        {obj-x :x obj-y :y obj-width :width obj-height :height} bounds-obj\n        vertical-midpoint (+ qt-x (/ qt-width 2))\n        horizontal-midpoint (+ qt-y (/ qt-height 2))\n        top-quadrant (and (< obj-y horizontal-midpoint)\n                          (< (+ obj-y obj-height) horizontal-midpoint))\n        bottom-quadrant (> obj-y horizontal-midpoint)\n        left-quadrants (and (< obj-x vertical-midpoint)\n                            (< (+ obj-x obj-width) vertical-midpoint))\n        right-quadrants (> obj-x vertical-midpoint)]\n    (cond\n      (and left-quadrants top-quadrant) 1\n      (and left-quadrants bottom-quadrant) 2\n      (and right-quadrants top-quadrant) 0\n      (and right-quadrants bottom-quadrant) 3)))\n\n(defn insert\n  \"Insert `bounds-obj` into the node, returning a freshly grown quadtree.\n  If the node exceeds the capacity, it will split and add all objects to\n  their corresponding subnodes.\"\n  [quadtree bounds-obj]\n  (let [{:keys [nodes objects bounds\n                level max-levels\n                max-objects objects]} quadtree\n        all-objects (conj objects bounds-obj)]\n    (if (pos? (count nodes))\n      (as-> quadtree quadtree\n        (assoc quadtree :objects [])\n        (reduce (fn [quadtree obj]\n                  (let [quadrant (get-quadrant quadtree obj)\n                        nodes (:nodes quadtree)]\n                    (if quadrant\n                      (merge quadtree {:nodes (assoc nodes\n                                                     quadrant\n                                                     (insert (nth nodes quadrant)\n                                                             obj))})\n                      (update quadtree :objects #(conj % obj)))))\n                quadtree\n                all-objects))\n      (if (and (> (count all-objects) max-objects) (< level max-levels))\n        (let [quadtree (if (empty? nodes) (split quadtree) quadtree)]\n          (insert quadtree bounds-obj))\n        (merge quadtree {:objects all-objects})))))\n\n(defn insert-all\n  \"Takes a `quadtree` and inserts all bounds objects from the\n  bounds-objs vector.\"\n  [quadtree bounds-objs]\n  (reduce (fn [quadtree obj]\n            (merge quadtree (insert quadtree obj)))\n          quadtree\n          bounds-objs))\n\n(defn retrieve\n  \"Retrieves a vector of all the bounds objects that could collide with\n  `bounds-obj` in `quadtree`.\"\n  [quadtree bounds-obj]\n  (->> (let [quadrant (get-quadrant quadtree bounds-obj)\n             nodes (:nodes quadtree)]\n         (if (pos? (count nodes))\n           (if quadrant\n             (retrieve (nth nodes quadrant) bounds-obj)\n             (mapv #(retrieve % bounds-obj) nodes))\n           (:objects quadtree)))\n       (r/flatten)\n       (into [])))\n\n(defn point?\n  \"Returns true if this object is a point in space\n  as in it has no width or height\"\n  [{:keys [x y width height]}]\n  (and (= width 0) (= height 0)))\n\n(defn retrieve-points\n  \"Returns a vector of all the points that collide/intersect\n  with `bounds-obj` in the `quadtree`.\"\n  [quadtree bounds-obj]\n  (filterv #(and (= (:x %) (:x bounds-obj))\n                 (= (:y %) (:y bounds-obj))\n                 (point? %)) (retrieve quadtree bounds-obj)))\n\n(defn intersects?\n  \"Takes two object bounds and returns true if they\n  intersect. \"\n  [obj-a obj-b]\n  (let [{x-a :x y-a :y width-a :width height-a :height} obj-a\n        {x-b :x y-b :y width-b :width height-b :height} obj-b\n        max-x-for-a (+ x-a width-a)\n        max-y-for-a (+ y-a height-a)\n        max-x-for-b (+ x-b width-b)\n        max-y-for-b (+ y-b height-b)]\n    (not (or (< max-x-for-a x-b)\n             (> x-a max-x-for-b)\n             (< max-y-for-a y-b)\n             (> y-a max-y-for-b)))))\n\n(defn retrieve-intersections\n  \"Returns all a vector of all the objects that collide/intersect\n  with `bounds-obj` in the `quadtree`.\"\n  [quadtree bounds-obj]\n  (filterv #(intersects? % bounds-obj) (retrieve quadtree bounds-obj)))\n"],"x_google_ignoreList":[0]}