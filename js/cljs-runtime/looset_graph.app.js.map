{"version":3,"sources":["looset_graph/app.cljs"],"mappings":"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","names":["js/goog.DEBUG","js/console.log","looset-graph.app/<sub","cljs.core.comp","cljs.core/deref","re-frame.alpha/subscribe","looset-graph.app/>evt","re-frame.alpha/dispatch","looset-graph.app/with-defaults","f","defaults-vec","m","G__30343","cljs.core.map","p__30344","vec__30345","cljs.core.nth","k","default","or__5045__auto__","cljs.core.get","cljs.core.partition","looset-graph.app/event-to-analytics","re_frame.alpha.__GT_interceptor","context","vec__30348","evt","value","evt-name","cljs.core/Keyword","cljs.core/name","map->str","v","cljs.core.assoc","cljs.core/map?","evt-value","cljs.core/clj->js","cljs.core/reduce-kv","js/gtag","js/looset-graph","js/looset-graph.app","js/looset-graph.app.events-history","looset-graph.app/events-history","cljs.core.atom","looset-graph.app/debugging-save-events","vec__30353","_value","ignored-events","cljs.core.swap_BANG_","cljs.core/conj","re-frame.alpha/reg-global-interceptor","looset-graph.app/bounding-box->dimensions","node","p1__30356#","looset-graph.app/type-str->type","cljs.core._EQ_","looset-graph.app/clean-surrounding-quotes","s","cljs.core/first","cljs.core/last","cljs.core.subs","cljs.core/count","looset-graph.app/extract-nodes-from-edge-rule","edge","node-from-id","cljs.core.get_in","node-from-type","node-to-type","node-to-id","var_args","G__30360","looset-graph.app/find-visible","js/Error","visibles","nodes-map","looset_graph.app.find_visible","result","to-visit","visited","new-visited","cljs.core.conj","parent-node","node-labels","new-to-visit","clojure.set.union","clojure.set.difference","new-result","cljs.core/seq","looset-graph.app/visible-nodes","fold-list","cljs.core.remove","cljs.core/set","re_frame.alpha.reg_sub","re_frame.alpha.reg_flow","re-frame.alpha/flow<-","p__30362","map__30363","cljs.core/--destructure-map","looset-graph.app/get-descendents","nodes","p1__30365#","p2__30369#","step-fn","G__30370","G__30371","cljs.core.reduce","looset-graph.app/raw-selected-nodes","app-state","p__30376","vec__30377","looset-graph.app/selected-nodes","hovered-node","raw-selected-nodes","cljs.core/empty?","p__30384","map__30385","hovs","sels","nmap","p__30390","vec__30391","looset-graph.app/selected-nodes-visible","selected-nodes","visible-nodes","clojure.set.intersection","p__30394","vec__30395","looset-graph.app/selected-node?","_","cljs.core/contains?","looset-graph.app/text->color","text","n","cljs.core/hash","h","cljs.core/mod","cljs.core/quot","l","looset-graph.app/label-font-family","p__30410","vec__30412","looset-graph.app/vis-data","p1__30408#","p1__30409#","p1__30407#","cljs.core.filter","G__30416","cljs.core.into","->node","p__30418","vec__30419","map__30422","map__30423","node-id","x","y","type","name","get-from-set","get-to-set","cljs.core/val","cljs.core.apply","cljs.core/concat","cljs.core.mapcat","cljs.core.partial","->edge","p__30429","vec__30430","iter__5523__auto__","s__30434","cljs.core/LazySeq","temp__5804__auto__","xs__6360__auto__","iterys__5519__auto__","s__30436","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__30438","cljs.core/chunk-buffer","i__30437","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30435","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__30433","from","to","cljs.core.not_EQ_","p__30451","map__30452","looset-graph.app/left-panel-size","looset-graph.app/graph-text","looset-graph.app/graph-ast","looset-graph.app/extract-nodes-from-foldable-rule","foldable","foldable-id-name","foldable-type-str","foldable-type","label-or-parent","extract-node-info","id","type-str","inner-nodes","cljs.core.drop","foldable-id-node","cljs.core/keys","cljs.core/merge","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","looset-graph.app/deep-merge-with","seq30462","G__30463","cljs.core/next","self__5754__auto__","maps","cljs.core/every?","cljs.core/merge-with","looset-graph.app/merge-nodes","res","latter","cljs.core/set?","looset-graph.app/build-hierarchy","nodes-ids","to-remove","v-children","cljs.core/into","looset-graph.app/nodes-hierarchy","cljs.core/memoize","n-hierarchy","cljs.core/dissoc","p__30487","vec__30488","looset-graph.app/nodes-list","path","fold-ui","node-children","opened?","p1__30480#","G__30491","G__30492","G__30493","G__30494","looset-graph.app/nodes-ui","looset-graph.app/fold-ui","looset-graph.app/sort-nodes","nodes-hierarchy","cljs.core.sort_by","p__30499","vec__30500","_v","looset-graph.app/all-instances-of-node-with-same-open-state-with-default","p__30507","vec__30508","acc","deeper-levels","step-reduce","cljs.core.dissoc","looset-graph.app/all-instances-of-node-with-same-open-state","p__30515","vec__30516","p__30523","vec__30524","looset-graph.app/nodes-map->fold-list","p1__30522#","p__30527","map__30529","G__30535","looset-graph.app/get-edn-string","p__30539","vec__30541","all","looset_graph.app.get_edn_string","cljs.core/array?","looset-graph.app/extract-edn-props","node-prop","edn","cljs.reader.read_string","p__30554","map__30555","looset-graph.app/no-memo-nodes-map*","graph-ast","nodes-from-foldable-rules","p1__30548#","cljs.core.mapv","nodes-from-edges","p1__30549#","node-props","p1__30550#","merged-nodes","nodes-with-parents","p__30557","vec__30558","map__30561","children","p1__30551#","p2__30552#","cljs.core/assoc-in","looset-graph.app/nodes-map*","looset-graph.app/nodes-map","p__30564","vec__30565","looset-graph.app/nodes-map-name","e30568","p__30572","vec__30573","looset-graph.app/foldable?","looset-graph.app/valid-graph?","looset-graph.app/hovered-node","looset-graph.app/vis-option-hierarchy","looset-graph.app/vis-view","p1__30589#","looset-graph.app/hidden-nodes","nodes-ui","G__30592","p1__30591#","cljs.core/second","p__30593","vec__30594","looset-graph.app/show-unhide-button?","hidden-nodes","and__5043__auto__","p__30604","map__30605","looset-graph.app/show-expand-button?","p1__30603#","looset-graph.app/nodes-map->graph-text-reduce-step","p__30616","p__30617","vec__30618","vec__30621","edges","props","node-k*","node-v","rename-if-label","p1__30606#","p1__30607#","node-k","edges-to","cljs.core/vals","cljs.core/vec","cljs.core/flatten","custom-props","custom-props*","cljs.core/select-keys","clojure.data/diff","cljs.core/str","p1__30610#","p1__30615#","p__30638","vec__30643","looset-graph.app/nodes-map->graph-text","p__30646","vec__30647","p__30650","vec__30651","looset-graph.app/disable-select-source-target-button?","selected","js/looset-graph.app.network","looset-graph.app/network","looset-graph.app/disperse-nodes-positions","mult-x","mult-y","visible-nodes-ids","p1__30658#","bounding-box","new-nodes-positions","p1__30662#","p1__30663#","cljs.core.update_in","cljs.core.merge_with","p__30667","vec__30668","looset-graph.app/resizing-panels","_event","new-state","re_frame.alpha.reg_event_db","p__30675","vec__30676","looset-graph.app/dispersing-nodes","p__30685","vec__30686","looset-graph.app/mouse-moved","_y","move-x","move-y","resizing-panels?","dispersing-nodes?","new-disp-x","x__5130__auto__","y__5131__auto__","new-disp-y","G__30690","looset-graph.app/get-pred","coll","p1__30694#","cljs.core/some","looset-graph.app/distance-between","p1","p2","cljs.core/+","p1__30699#","cljs.core/-","G__30706","looset-graph.app/geometric-spiral","origin","looset_graph.app.geometric_spiral","a","b","angle-step","vec__30716","cx","cy","theta","r","Math/pow","Math/cos","Math/sin","cljs.core.range","p__30723","vec__30725","looset-graph.app/keypress","keypressed","G__30728","p__30733","p__30734","map__30736","vec__30737","looset-graph.app/set-graph-text","e30740","g-ast","looset-graph.graph-parser/graph-ast","nm*","p1__30729#","new-fold-ui","p1__30730#","re_frame.alpha.reg_event_fx","p__30744","vec__30745","looset-graph.app/toggle-open-close","event","cljs.core/not","G__30749","G__30750","looset-graph.app/set-nodes-positions","re-frame.alpha/reg-fx","selection-el","js/document","range","js/window","p__30753","p__30754","map__30756","vec__30757","looset-graph.app/nodes-list-item-clicked","clicked-node","clicked-and-descendents","sel-cli-inter","new-selection","looset-graph.app/round-by","step","pos","js/Math.round","p__30772","vec__30773","map__30776","looset-graph.app/set-vis-view","view-position","scale","p__30786","vec__30787","map__30790","dragging?","_view-position","_scale","args","p1__30777#","height","cljs.core/max","p1__30778#","cljs.core/min","p1__30779#","width","p1__30780#","p1__30781#","tree","quadtree-cljc.core/->bounds","quadtree_cljc.core.__GT_quadtree","sorted-nodes","p1__30782#","filled-tree","vec__30797","initial-pos","possible-positions","good-x","good-y","_non-collliding-pos","p__30812","vec__30815","quadtree-cljc.core/retrieve-intersections","quadtree-cljc.core/insert","p1__30783#","p1__30784#","p__30825","map__30826","looset-graph.app/clear-nodes-positions","p1__30824#","s__30828","b__30830","i__30829","vec__30833","iter__30827","vec__30839","p__30842","vec__30843","looset-graph.app/drag-changed","p__30846","vec__30847","looset-graph.app/toggle-hidden","p__30851","vec__30853","looset-graph.app/node-hovered","p__30856","vec__30857","looset-graph.app/debug-event","p__30860","p__30861","map__30862","vec__30863","looset-graph.app/organize-hierarchy-positions","p__30870","vec__30872","looset-graph.app/organize-hierarchy-positions-step-2","looset-graph.app/hide-all-or-selected","all-nodes","nodes-to-hide","hidden","p1__30878#","p__30883","map__30884","looset-graph.app/show-selected","unhidden","p1__30882#","p__30889","map__30891","looset-graph.app/collapse-all-or-selected","p1__30887#","nodes-to-collapse","closed","close-all-instances","p__30895","map__30896","looset-graph.app/expand-selected","p1__30894#","opened","open-all-instances","p__30901","vec__30904","looset-graph.app/mouse-select-mode-evt","state","p__30912","p__30913","map__30914","vec__30915","looset-graph.app/network-clicked","p1__30907#","p2__30908#","toggly-add","p1__30909#","looset-graph.app/rerender-vis-sub","looset-graph.app/rerender-vis","looset-graph.app/toggle-edit-graph-text-area","p__30924","map__30926","looset-graph.app/select-source","vis-edges-from","p1__30922#","p__30931","map__30932","looset-graph.app/select-target","vis-edges-to","p1__30929#","looset-graph.app/graph-component-inner","graph-component-id","update-comp","p__30957","vec__30958","component","prev-props","map__30961","prev-vis-data","vis-data","options","view","reagent.core/props","mount-comp","container","cljs.core/reset!","js/module$node_modules$vis_network$peer$umd$vis_network_min","G__30967","G__30968","G__30969","p1__30952#","G__30970","G__30971","reagent.core.create_class","looset-graph.app/graph-component","re_frame.alpha.sub","looset-graph.app/panel-splitter","G__30976","looset-graph.app/botton-buttons","G__30977","looset-graph.app/svg-eye","cljs.core.merge","looset-graph.app/svg-filled-eye","p__30986","map__30987","map__30988","map__30989","looset-graph.app/node-view","class","color","level","hidden?","selected-node?","mouse-select-mode","foldable-node?","G__30991","G__30994","G__30995","G__30996","G__30997","p__30999","map__31001","looset-graph.app/svg-label","rotation-degree","p__31004","map__31005","looset-graph.app/svg-arrow-triangle","p__31008","map__31009","looset-graph.app/label-node","node-item","node-name","p__31015","map__31016","looset-graph.app/lix-node","looset-graph.app/nodes-list-view","s__31020","b__31022","i__31021","iter__31019","node-type-comp","G__31025","fexpr__31024","G__31027","fexpr__31026","looset-graph.app/black-cursor-svg-path","looset-graph.app/left-buttons","icons-size","G__31028","G__31029","G__31030","G__31031","G__31032","G__31033","G__31034","G__31035","disable?","G__31038","G__31039","canvas","js/document.getElementsByTagName","err","js/console.error","G__31040","looset-graph.app/code-font-family","looset-graph.app/code-font-size","looset-graph.app/code-margin","looset-graph.app/code-padding","p1__31046#","looset-graph.app/edit-raw-graph-text","G__31048","p1__31049#","p1__31050#","p1__31051#","p1__31052#","looset-graph.app/debug-quick-val-set","G__31056","G__31057","G__31058","G__31059","G__31060","looset-graph.app/quattrocento-font","looset-graph.app/global-style","looset-graph.app/ctrl-c-selected-nodes","cljs.core.interleave","cljs.core.repeat","looset-graph.app/main","looset-graph.util/error-boundary","p__31068","vec__31070","looset-graph.app/set-toggle-input","looset-graph.app/toggle-input","p__31076","vec__31077","looset-graph.app/set-number-input","knob","p__31086","vec__31087","looset-graph.app/number-input","looset-graph.app/initial-state","looset-graph.app/gzip","cs-mode","b-array","cs","writer","js/Response","looset-graph.app/gzip-compress","string","$","js/TextEncoder","js/CompressionStream","p1__31092#","js/Uint8Array","cljs.core/char","looset-graph.app/gzip-decompress","compressed-string","p1__31093#","js/DecompressionStream","p1__31094#","js/TextDecoder","looset-graph.app/set-url-state-interceptor","re_frame.std_interceptors.on_changes","graph-text","p1__31099#","loc","js/window.location","js/window.history.pushState","js/encodeURIComponent","js/btoa","looset-graph.app/init-url-history-observer","p1__31102#","js/window.addEventListener","looset-graph.app/init-mousemove","p1__31104#","js/document.body.addEventListener","G__31105","looset-graph.app/init-keyboard-events","p1__31107#","G__31108","p__31110","vec__31111","looset-graph.app/init-state","compressed-graph","js/URLSearchParams","js/window.location.search","default-graph","p1__31115#","js/atob","re-frame.alpha/dispatch-sync","p__31117","map__31119","looset-graph.app/mouse-up","looset-graph.app/init-mouseup","js/document.exitPointerLock","G__31121","looset-graph.app/mount-app-element","re-frame.alpha/clear-subscription-cache!","el","reagent.dom.render","looset-graph.app/init","cljs.core/chunk-first"],"sourcesContent":["(ns looset-graph.app\n  (:require\n    [cljs.reader]\n    [clojure.data]\n    [clojure.set :as set]\n    [clojure.string]\n    [looset-graph.graph-parser :as graph-parser]\n    [looset-graph.util :as util]\n    [re-frame.alpha :as re-frame]\n    [re-frame.std-interceptors]\n    [reagent.core :as reagent]\n    [reagent.dom]\n    [vis-network]\n    [quadtree-cljc.core :as quad]))\n\n;; -- Util ----\n\n(when ^boolean js/goog.DEBUG ;; Code removed in production\n  ;; (day8.re-frame-10x/show-panel! true) ;; Or just press ctrl-shift-x to toggle pannel\n  (js/console.log \"Debugger mode!\"))\n\n;; Redef re-frame subscribe and dispatch for brevity\n(def <sub (comp deref re-frame/subscribe))\n(def >evt re-frame/dispatch)\n\n(defn with-defaults\n  \"Meant to be used with `reg-flow` :output. Define default values\n  for values in the map and sends the values as a vector.\"\n  [f defaults-vec]\n  (fn [m]\n    (f (map (fn [[k default]]\n              (or (get m k) default))\n            (partition 2 defaults-vec)))))\n\n(def event-to-analytics\n  (re-frame/->interceptor\n    :id :event-to-analytics\n    :after (fn [context]\n             (let [[evt value] (:event (:coeffects context))\n                   evt-name (if (keyword? evt) (name evt) (str evt))\n                   map->str (fn [m k v] (assoc m k (if (map? v) (str v) v)))\n                   evt-value (if (map? value)\n                               (clj->js (reduce-kv map->str {} value))\n                               #js{\"value\" value})]\n               (js/gtag \"event\" evt-name evt-value)\n               ;; (js/console.log evt-name evt-value)\n               context))))\n\n(defonce events-history (atom []))\n\n(def debugging-save-events\n  (re-frame/->interceptor\n    :id :debugging-save-events\n    :after (fn [context]\n             (let [[evt _value] (:event (:coeffects context))\n                   ignored-events #{:looset-graph.app/mouse-moved\n                                    :looset-graph.app/organize-hierarchy-positions-step-2\n                                    :looset-graph.app/node-hovered}]\n               (when-not (ignored-events evt)\n                 (js/console.log (:event (:coeffects context)))\n                 (swap! events-history conj (:event (:coeffects context)))))\n             context)))\n(re-frame/reg-global-interceptor debugging-save-events)\n\n(defn bounding-box->dimensions [node]\n  {:x (/ (+ (.-right node) (.-left node)) 2)\n   :y (/ (+ (.-top node) (.-bottom node)) 2)\n   :width (- (.-right node) (.-left node))\n   :height (- (.-bottom node) (.-top node))})\n\n(comment\n  @events-history\n  (reset! events-history []))\n\n;; -- Subs ----\n\n;; TODO: Replace all reg-subs for reg-flow? Maybe there's still usage for subs,\n;; it also has the nice effect of defining default values in a single place.\n\n;; I'll want to abstract the subs, make a generic one and pass the path as an\n;; argument to subs. There are people doing that as in https://vvvvalvalval.github.io/posts/some-re-frame-patterns-for-composability.html#generic_subscriptions_and_events_for_app-db_paths\n;; but my was to follow official re-frame documentation and indeed create a lot\n;; of subs to extract data from app-state. Re-frame official documentation about it\n;; is in https://day8.github.io/re-frame/correcting-a-wrong/#a-final-faq\n\n;; Reviewing re-frame philosophy https://github.com/day8/re-frame/blob/master/docs/historical.md\n;; I can see how I that abstracting the subs doesn't hit the main philosophy,\n;; but might be more in sync with my philosophy of to not try to predict how the\n;; code will need to change, the point of not generalizing subs is that if I\n;; the structure of the app-state I'll need to change all the views, but maybe\n;; I won't need it, and if I need might not be such a problem. I might generalize\n;; the layer 2 subs and simple events and define defaults value in the initial-state.\n\n;; (defn dot-graph\n;;   [app-state]\n;;   (get-in app-state [:domain :dot-graph] \"\"))\n;; (re-frame/reg-sub ::dot-graph dot-graph)\n\n(def type-str->type #(if (= \"labelID\" %) :label :lix))\n\n(defn clean-surrounding-quotes [s]\n  (if (= \\\" (first s) (last s))\n    (subs s 1 (dec (count s)))\n    s))\n\n(defn extract-nodes-from-edge-rule\n  [edge]\n  (let [node-from-id (clean-surrounding-quotes (get-in edge [1 1 1 1]))\n        node-from-type (type-str->type (get-in edge [1 1 0]))\n        node-to-type   (type-str->type (get-in edge [2 1 0]))\n        node-to-id   (clean-surrounding-quotes (get-in edge [2 1 1 1]))]\n    [{node-from-id {:type node-from-type :edges-to {:nameless #{node-to-id}}}}\n     {node-to-id {:type node-to-type :edges-from {:nameless #{node-from-id}}}}]))\n\n;; (defn  graph-ast->dot-graph\n;;   [graph-ast]\n;;   (->> graph-ast\n;;     (filter #(= \"edge\" (first %)))\n;;     (mapv edge->dot-graph-line)\n;;     (apply str)\n;;     (#(str \"dinetwork {\"%\"}\"))\n;;     (#(do (tap> \"a2\") (tap> %) %))))\n;; (re-frame/reg-sub\n;;   ::dot-graph\n;;   :<- [::graph-ast]\n;;   graph-ast->dot-graph)\n\n(defn find-visible\n  ([visibles nodes-map node] (find-visible #{} #{} #{} visibles nodes-map node))\n  ([result to-visit visited visibles nodes-map node]\n   (let [new-visited (conj visited node)\n         parent-node (:parent (nodes-map node))\n         node-labels (:label (nodes-map node))\n         new-to-visit (-> to-visit\n                        (conj parent-node)\n                        (clojure.set/union node-labels)\n                        (clojure.set/difference visited))\n         new-result (if (visibles node)\n                      (conj result node)\n                      result)]\n     (if (seq new-to-visit)\n       (find-visible new-result new-to-visit new-visited visibles nodes-map (first to-visit))\n       new-result))))\n\n(defn visible-nodes\n  [fold-list]\n  (->> fold-list\n    (remove :opened?)\n    (remove :hidden?)\n    (map :node-id)\n    (set)))\n(re-frame/reg-sub\n  ::visible-nodes\n  :<- [::fold-list]\n  visible-nodes)\n(re-frame/reg-flow\n  {:id :f-visible-nodes\n   :inputs {:fold-list (re-frame/flow<- :f-fold-list)}\n   :output (fn [{:keys [fold-list]}] (visible-nodes fold-list))\n   :path [:ui :f-visible-nodes]})\n\n(defn get-descendents [nodes-map nodes]\n  (let [step-fn #(clojure.set/union\n                   %1\n                   (get-descendents nodes-map (:children (nodes-map %2))))]\n    (reduce step-fn nodes nodes)))\n\n(defn raw-selected-nodes\n  [app-state]\n  (get-in app-state [:ui :selected-nodes] #{}))\n(re-frame/reg-sub ::raw-selected-nodes raw-selected-nodes)\n\n(defn selected-nodes\n  [[hovered-node raw-selected-nodes nodes-map]]\n  (if (empty? hovered-node)\n    raw-selected-nodes\n    (get-descendents nodes-map hovered-node)))\n(re-frame/reg-sub\n  ::selected-nodes\n  :<- [::hovered-node]\n  :<- [::raw-selected-nodes]\n  :<- [::nodes-map]\n  selected-nodes)\n(re-frame/reg-flow\n  {:id :f-selected-nodes\n   :inputs {:hovs [:ui :hovered-node]\n            :sels [:ui :selected-nodes]\n            :nmap [:domain :nodes-map]}\n   :output (fn [{:keys [hovs sels nmap]}]\n             (selected-nodes [(or hovs #{})\n                              (or sels #{})\n                              nmap]))\n   :path [:ui :f-selected-nodes]})\n\n(defn selected-nodes-visible\n  [[selected-nodes visible-nodes]]\n  (clojure.set/intersection selected-nodes visible-nodes))\n(re-frame/reg-sub\n  ::selected-nodes-visible\n  :<- [::selected-nodes]\n  :<- [::visible-nodes]\n  selected-nodes-visible)\n\n(defn selected-node?\n  [selected-nodes [_ node]]\n  (contains? selected-nodes node))\n(re-frame/reg-sub\n  ::selected-node?\n  :<- [::selected-nodes]\n  selected-node?)\n\n(defn text->color [text]\n  (let [n (hash text)\n        h (mod n 360)\n        s (+ 60 (mod (quot n 360) 20))\n        l (+ 50 (mod (quot n 7200) 10))]\n    (str \"hsl(\"h\"deg, \"s\"%, \"l\"%)\")))\n\n(def label-font-family \"Proza Libre\")\n\n(defn vis-data\n  [[visible-nodes nodes-map]]\n  (let [nodes (->> nodes-map\n                (filter #(visible-nodes (first %)))\n                (into {}))\n        ->node\n        (fn [[node-id\n              {{:strs [x y]} :position\n               :keys [type name]\n               :or {name node-id}}]]\n          {:id node-id\n           :label (if (= type :label)\n                    (str \"<b>\"name\"</b>\")\n                    name)\n           :shape \"box\"\n           :color {:background \"white\" :border \"gray\"}\n                   ;; :highlight {:border \"#ff0000\"}}\n           :x x :y y\n           :margin 7\n           :shadow true\n           :font\n           (when (= type :label)\n             {:face label-font-family\n              :multi \"html\"\n              :color (text->color node-id)})})\n\n        get-from-set #(find-visible visible-nodes nodes-map %)\n        get-to-set #(->> %\n                      (:edges-to)\n                      (map val) ;; TODO: get the text in the relationship/edge.\n                      (apply concat)\n                      (mapcat (partial find-visible visible-nodes nodes-map)))\n        ->edge\n        (fn [[k v]]\n          (for [from (get-from-set k)\n                to (get-to-set v)\n                :when (not= from to)]\n            {:from from :to to :arrows {:to {:enabled true :type \"arrow\"}}\n             :color {:highlight \"#33a0ff\"}}))]\n    {:nodes (map ->node nodes)\n     :edges (mapcat ->edge nodes-map)}))\n(re-frame/reg-sub\n  ::vis-data\n  :<- [::visible-nodes]\n  :<- [::nodes-map]\n  vis-data)\n(re-frame/reg-flow\n  {:id :f-vis-data\n   :inputs {:visible-nodes (re-frame/flow<- :f-visible-nodes)\n            :nodes-map (re-frame/flow<- :nodes-map)}\n   :output (fn [{:keys [visible-nodes nodes-map]}] (vis-data [visible-nodes nodes-map]))\n   :path [:ui :f-vis-data]})\n\n(defn left-panel-size\n  [app-state]\n  (get-in app-state [:ui :panels :left-panel-size] \"400px\"))\n(re-frame/reg-sub ::left-panel-size left-panel-size)\n\n(defn graph-text\n  [app-state]\n  (get-in app-state [:domain :graph-text] \"\"))\n(re-frame/reg-sub ::graph-text graph-text)\n\n(defn graph-ast\n  [app-state]\n  (get-in app-state [:ui :validation :valid-graph-ast]))\n(re-frame/reg-sub ::graph-ast graph-ast)\n\n(defn extract-nodes-from-foldable-rule\n  [foldable]\n  (let [foldable-id-name (clean-surrounding-quotes (get-in foldable [1 1 1 1]))\n        foldable-type-str (get-in foldable [1 1 0])\n        foldable-type (type-str->type foldable-type-str)\n        label-or-parent (if (= :label foldable-type)\n                          {:label #{foldable-id-name}}\n                          {:parent foldable-id-name})\n        extract-node-info (fn [node]\n                            (let [id (clean-surrounding-quotes (get-in node [1 1 1]))\n                                  type-str (get-in node [1 0])\n                                  type (type-str->type type-str)]\n                              {id (assoc label-or-parent :type type)}))\n        inner-nodes (map extract-node-info (drop 2 foldable))\n        foldable-id-node {foldable-id-name {:type foldable-type\n                                            :children (set (mapcat keys inner-nodes))\n                                            :foldable (if (seq inner-nodes) true false)}}]\n    (apply merge foldable-id-node inner-nodes)))\n\n(defn deep-merge-with\n  \"Code extracted from https://clojuredocs.org/clojure.core/merge-with#example-5b80843ae4b00ac801ed9e74\n  Like merge-with, but merges maps recursively, applying the given fn\n  only when there's a non-map at a particular level.\n  (deep-merge-with + {:a {:b {:c 1 :d {:x 1 :y 2}} :e 3} :f 4}\n                     {:a {:b {:c 2 :d {:z 9} :z 3} :e 100}})\n  -> {:a {:b {:z 3, :c 3, :d {:z 9, :x 1, :y 2}}, :e 103}, :f 4}\"\n  [f & maps]\n  (apply\n    (fn m [& maps]\n      (if (every? map? maps)\n        (apply merge-with m maps)\n        (apply f maps)))\n    maps))\n\n(defn merge-nodes\n  \"union for the set of labels and merge the rest\"\n  [nodes]\n  (apply deep-merge-with\n         (fn [res latter]\n           (if (set? res)\n             (clojure.set/union res latter)\n             latter))\n   nodes))\n\n;; This could be optimized as I don't need to process nodes that are closed (maybe change how the graph is defined)\n;; This is good enough for MVP, but there's a problem if I have a cycle or depending on the order of the definition, for instance the graph-text\n;; =>label5:\n;;   =>label6\n;; =>label6:\n;;   =>label5\n;; Should generate a structure like\n;; -=vlabel5\n;;  -=vlabel6\n;;   -=>label5\n;; -=vlabel6\n;;  -=vlabel5\n;;   -=>label6\n(defn- build-hierarchy\n  [nodes-map nodes-ids to-remove visited]\n  ;; Maybe to acomplish the cyclical nodes definition to show, I could have a\n  ;;lazy-seq here, so intead of the `(into {} (mapcat ...` I'd have `{:node-children (lazy-seq (mapcat ...`.\n  (into {}\n    (mapcat (fn [node-id]\n              (if (contains? visited node-id)\n                {node-id {}}\n                (let [new-visited (conj visited node-id)\n                      node (get nodes-map node-id)\n                      v-children (:children node)]\n                  (swap! to-remove into v-children)\n                  {node-id (build-hierarchy nodes-map v-children to-remove new-visited)})))\n            nodes-ids)))\n(def nodes-hierarchy\n  (memoize\n    (fn [nodes-map]\n      (let [to-remove (atom #{})\n            n-hierarchy (build-hierarchy nodes-map (keys nodes-map) to-remove #{})]\n        (apply dissoc n-hierarchy @to-remove)))))\n\n(defn nodes-list\n  [path nodes-map fold-ui [node node-children]]\n  (let [opened? (when (seq node-children)\n                    (:opened? (fold-ui node) false))]\n    (cons {:node-id node\n           :node-type (:type (nodes-map node))\n           :path (conj path node)\n           :level (count path)\n           :color (text->color node)\n           :opened? opened?\n           :hidden? (:hidden? (nodes-map node))}\n          (when opened?\n            (mapcat #(nodes-list (conj path node) nodes-map (fold-ui node) %) node-children)))))\n\n(defn nodes-ui\n  [app-state]\n  (get-in app-state [:domain :nodes-map] {}))\n(re-frame/reg-sub ::nodes-ui nodes-ui)\n\n(defn fold-ui\n  [app-state]\n  (get-in app-state [:ui :fold] {}))\n(re-frame/reg-sub ::fold-ui fold-ui)\n\n;; TODO: Also sort by the order that it was mentioned\n;; TODO: Also sort inner structure\n(defn sort-nodes\n  [nodes-map nodes-hierarchy]\n  (sort-by (fn [[k _v]] (-> k nodes-map :type)) nodes-hierarchy))\n\n(defn all-instances-of-node-with-same-open-state-with-default\n  \"I created this version just I can use it with an existing fold-ui and use its\n  values as default\"\n  [nodes-map nodes-hierarchy]\n  (reduce\n    (fn step-reduce [acc [k v]]\n      (let [deeper-levels (reduce step-reduce {} (dissoc v :opened?))]\n        (conj acc [k (assoc deeper-levels :opened? (get-in nodes-map [k :opened?] (:opened? v false)))])))\n    {}\n    nodes-hierarchy))\n\n(defn all-instances-of-node-with-same-open-state\n  \"A node can have more than one instance, in multiple labels for example. As\n  graph-text it can show up only once, so we are setting all occurrences of it\n  to the same state.\"\n  [nodes-map nodes-hierarchy]\n  (reduce\n    (fn step-reduce [acc [k v]]\n      (let [deeper-levels (reduce step-reduce {} v)]\n        (conj acc [k (assoc deeper-levels :opened? (:opened? (nodes-map k) false))])))\n    {}\n    nodes-hierarchy))\n\n(defn nodes-map->fold-list\n  [[nodes-map fold-ui]]\n  (->> nodes-map\n    (nodes-hierarchy)\n    (sort-nodes nodes-map)\n    ;; (#(do (tap> {:nodes-hierarchy %}) %))\n    (mapcat #(nodes-list [] nodes-map fold-ui %))))\n    ;; (#(do (tap> {:nodes-list %}) %))))\n(re-frame/reg-sub\n  ::fold-list\n  :<- [::nodes-map]\n  :<- [::fold-ui]\n  nodes-map->fold-list)\n(re-frame/reg-flow\n  {:id :f-fold-list\n   :inputs {:nodes-map (re-frame/flow<- :nodes-map)\n            :fold-ui [:ui :fold]}\n   ;; :output (fn [{:keys [nodes-map fold-ui]}] (nodes-map->fold-list [(or nodes-map {}) (or fold-ui {})]))})\n   :output (fn [{:keys [nodes-map fold-ui]}] (nodes-map->fold-list [nodes-map fold-ui]))\n   ;; :output (with-defaults nodes-map->fold-list [:nodes-map {} :fold-ui {}])})\n   :path [:flow-paths :f-fold-list]})\n\n(defn get-edn-string\n  ([all] (get-edn-string \"\" all))\n  ([acc [_ s :as all]]\n   (if (array? s)\n     (reduce get-edn-string acc (rest all))\n     (str acc s))))\n\n(defn extract-edn-props\n  [node-prop]\n  (let [node-id (clean-surrounding-quotes (get-in node-prop [1 1 1 1]))\n        edn (get node-prop 2)]\n    [{node-id (cljs.reader/read-string (get-edn-string edn))}]))\n\n(defn no-memo-nodes-map*\n  [{:keys [graph-ast]}]\n  (let [nodes-from-foldable-rules (->> graph-ast\n                                    (filter #(= \"foldable\" (first %)))\n                                    (mapv extract-nodes-from-foldable-rule))\n\n        nodes-from-edges (->> graph-ast\n                           (filter #(= \"edge\" (first %)))\n                           (mapcat extract-nodes-from-edge-rule))\n        node-props (->> graph-ast\n                     (filter #(= \"nodeProps\" (first %)))\n                     (mapcat extract-edn-props))\n\n        ;; Consolidates the nodes from the 3 types of rules.\n        merged-nodes\n        (merge-nodes\n          (concat nodes-from-foldable-rules\n                  nodes-from-edges\n                  node-props))\n\n        ;; Extra step to go through the nodes and see what are the lixs' children to define\n        ;; nodes parents and which ones are global\n        nodes-with-parents\n        (reduce (fn [nodes [k {:keys [type children]}]]\n                  (if (= :lix type)\n                    (reduce #(assoc-in %1 [%2 :parent] k) nodes children)\n                    nodes))\n                merged-nodes\n                merged-nodes)]\n    nodes-with-parents))\n\n(def nodes-map* (memoize no-memo-nodes-map*))\n(re-frame/reg-flow\n {:id     :nodes-map\n  :inputs {:graph-ast [:ui :validation :valid-graph-ast]}\n  :output nodes-map*\n  :path   [:domain :nodes-map]})\n\n;; TODO: I can eventually replace the subs by flows.\n(defn nodes-map\n  [app-state]\n  (get-in app-state [:domain :nodes-map]))\n(re-frame/reg-sub ::nodes-map nodes-map)\n\n;; This one might be better as a reg-sub than a flow.\n(defn nodes-map-name\n  [nodes-map [_ node-id]]\n  (try\n    (:name (nodes-map node-id))\n    (catch :default _\n      nil)))\n(re-frame/reg-sub\n  ::nodes-map-name\n  :<- [::nodes-map]\n  nodes-map-name)\n\n(defn foldable?\n  [nodes-map [_ node]]\n  ;; (tap> {:c7 nodes-map})\n  (-> node nodes-map :foldable))\n(re-frame/reg-sub\n  ::foldable-node?\n  :<- [::nodes-map]\n  foldable?)\n\n(defn valid-graph?\n  [app-state]\n  (get-in app-state [:ui :validation :valid-graph?] false))\n(re-frame/reg-sub ::valid-graph? valid-graph?)\n\n(defn hovered-node\n  [app-state]\n  (get-in app-state [:ui :hovered-node] #{}))\n(re-frame/reg-sub ::hovered-node hovered-node)\n\n(defn vis-option-hierarchy\n  [app-state]\n  (get-in app-state [:ui :vis-options :layout :hierarchical :enabled] false))\n(re-frame/reg-sub ::vis-option-hierarchy vis-option-hierarchy)\n\n(defn vis-view\n  [app-state]\n  (get-in app-state [:ui :vis-view] nil))\n(re-frame/reg-sub ::vis-view vis-view)\n\n;; (defn mouse-select-mode-sub\n;;   [app-state]\n;;   (get-in app-state [:ui :mouse-select-mode] false))\n;; (re-frame/reg-sub ::mouse-select-mode mouse-select-mode-sub)\n(re-frame/reg-sub\n  ::mouse-select-mode\n  :-> #(get-in % [:ui :mouse-select-mode] false))\n\n(defn hidden-nodes\n  [nodes-ui]\n  (some->> nodes-ui\n    (filter #(:hidden? (second %)))\n    (map first)))\n(re-frame/reg-sub\n  ::hidden-nodes\n  :<- [::nodes-ui]\n  hidden-nodes)\n\n(defn show-unhide-button?\n  [[selected-nodes hidden-nodes]]\n  (and hidden-nodes\n       (> (count selected-nodes) 1)\n       (seq (clojure.set/intersection\n              (set selected-nodes)\n              (set hidden-nodes)))))\n(re-frame/reg-sub\n  ::show-unhide-button?\n  :<- [::selected-nodes]\n  :<- [::hidden-nodes]\n  show-unhide-button?)\n\n(defn show-expand-button?\n  [{:keys [selected-nodes fold-list]}]\n  (->> fold-list\n    (filter #(-> % :opened? false?))\n    (map :node-id)\n    (set)\n    (clojure.set/intersection (set selected-nodes))\n    (seq)))\n(re-frame/reg-flow\n  {:id :f-show-expand-button?\n   :inputs {:selected-nodes (re-frame/flow<- :f-selected-nodes)\n            :fold-list (re-frame/flow<- :f-fold-list)}\n   :output show-expand-button?\n   :path [:ui :f-show-expand-button?]})\n\n(defn nodes-map->graph-text-reduce-step\n  [nodes-map]\n  (fn [[children edges props] [node-k* node-v]]\n    (let [rename-if-label (fn [s]\n                            (-> s\n                              (#(str \"\\\"\"%\"\\\"\"))\n                              (#(if (= :label (:type (get nodes-map s {}))) (str \"=>\"%) %))))\n          node-k (rename-if-label node-k*)\n          node-children (seq (map rename-if-label (:children node-v)))\n          edges-to (->> node-v :edges-to vals (map vec) flatten (map rename-if-label) seq)\n          custom-props (dissoc node-v :type :edges-to :edges-from :label :children :foldable :parent)\n          custom-props* (select-keys node-v [:name :position :hidden? :opened?])\n          _ (assert (= custom-props custom-props*)\n                    (str \"Some new node property was added, so should it be included in the text model or not?\\nThe difference was \"(clojure.data/diff custom-props custom-props*)))]\n      [(if node-children\n         (apply str (flatten (concat [children node-k \":\\n\"] (map #(str \"  \"%\"\\n\") node-children) [\"\\n\"])))\n         children)\n       (if edges-to\n         (apply str (flatten (concat [edges] (map #(str node-k\" -> \"%\"\\n\") edges-to))))\n         edges)\n       (if (seq custom-props)\n         (str props node-k\" \"custom-props\"\\n\")\n         props)])))\n(defn nodes-map->graph-text\n  [[nodes-map]]\n  (->> nodes-map\n    (reduce (nodes-map->graph-text-reduce-step nodes-map) [\"\" \"\" \"\"])\n    ((fn [[children edges props]]\n       (str children edges\"\\n\"props)))))\n(re-frame/reg-flow\n  {:id :graph-text\n   :inputs {:nodes-map (re-frame/flow<- :nodes-map)}\n   :output (with-defaults nodes-map->graph-text [:nodes-map {}])\n   :path [:domain :graph-text]})\n\n;; This would be an example of a layer 2 reg-flow instead of reg-sub\n;; Does it make sense to use it like this instead of a subscription? \ud83e\udd37\n(re-frame/reg-flow\n  {:id :f-editing-graph-text\n   :inputs {:editing-graph-text [:ui :editing-graph-text]}\n   :output (with-defaults first [:editing-graph-text false])\n   :path [:ui :editing-graph-text]})\n\n(defn disable-select-source-target-button?\n  [[selected]]\n  (empty? selected))\n(re-frame/reg-flow\n  {:id :disable-select-source-target-button?\n   :inputs {:selected (re-frame/flow<- :f-selected-nodes)}\n   :output (with-defaults disable-select-source-target-button? [:selected #{}])\n   :path [:flow-paths :disable-select-source-target-button?]})\n\n;; DO NOT create new reg-subs, use reg-flow instead!\n\n;; -- Events ----\n\n(defonce network (atom nil))\n(declare set-nodes-positions)\n\n(defn disperse-nodes-positions\n  [app-state mult-x mult-y]\n  (let [visible-nodes-ids (get-in app-state [:ui :f-visible-nodes])\n        nodes (map\n                 #(let [bounding-box (.getBoundingBox @network %)]\n                    (assoc (bounding-box->dimensions bounding-box)\n                      :id %\n                      :bounding-box bounding-box))\n                 visible-nodes-ids)\n        new-nodes-positions (into {} (map #(into {(:id %) {:position {\"x\" (* (:x %) mult-x)\n                                                                      \"y\" (* (:y %) mult-y)}}})\n                                          nodes))]\n    (update-in app-state [:domain :nodes-map] #(merge-with merge % new-nodes-positions))))\n\n(defn resizing-panels\n  [app-state [_event new-state]]\n  (assoc-in app-state [:ui :panels :resizing-panels] new-state))\n(re-frame/reg-event-db ::resizing-panels resizing-panels)\n\n(defn dispersing-nodes\n  [app-state [_event new-state]]\n  (assoc-in app-state [:ui :dispersing-nodes?] new-state))\n(re-frame/reg-event-db ::dispersing-nodes dispersing-nodes)\n\n(defn mouse-moved\n  [app-state [_event x _y move-x move-y]]\n  (let [resizing-panels? (get-in app-state [:ui :panels :resizing-panels])\n        dispersing-nodes? (get-in app-state [:ui :dispersing-nodes?])\n        new-disp-x (max 0.5 (inc (/ move-x 200)))\n        new-disp-y (max 0.5 (inc (/ move-y 200)))]\n    (cond-> app-state\n      resizing-panels?\n      (assoc-in [:ui :panels :left-panel-size] (str x\"px\"))\n      dispersing-nodes?\n      (disperse-nodes-positions new-disp-x new-disp-y)\n      dispersing-nodes?\n      (assoc-in [:ui :number-input 1] new-disp-x)\n      dispersing-nodes?\n      (assoc-in [:ui :number-input 2] new-disp-y))))\n(re-frame/reg-event-db ::mouse-moved mouse-moved)\n\n(defn get-pred\n  \"Returns the first element of coll that satisfies the predicate f.\"\n  [f coll]\n  (some #(when (f %) %) coll))\n\n;; --- Avoid overlapping\n(defn distance-between\n  \"Squared distance\"\n  [p1 p2]\n  (apply + (map (comp #(* % %) -) p1 p2)))\n\n(defn geometric-spiral\n  \"Returns an infinite lazy sequence of [x y] points for a geometric (logarithmic) spiral.\n   - origin: starting [x y]\n   - a: base radius scale\n   - b: ratio > 1 => radius grows each step; 0 < b < 1 => radius shrinks\n   - angle-step: how much to increment theta in each step (radians).\"\n  ([origin]\n   (geometric-spiral origin 20))\n  ([origin a]\n   (geometric-spiral origin a 1.04 0.52)) ; some default values\n  ([origin a b angle-step]\n   (let [[cx cy] origin]\n     (map (fn [n]\n            (let [theta (* n angle-step)\n                  r     (* a (Math/pow b theta))]\n              [(+ cx (* r (Math/cos theta)))\n               (+ cy (* r (Math/sin theta)))]))\n          (range)))))\n;; ---\n\n(defn keypress\n  [app-state [_event keypressed]]\n  (case keypressed\n    \"v\" (assoc-in app-state [:ui :mouse-select-mode] false)\n    \"s\" (assoc-in app-state [:ui :mouse-select-mode] true)))\n(re-frame/reg-event-db ::keypress keypress)\n\n(defn set-graph-text\n  [{app-state :db} [_event v]]\n  (try\n    (let [g-ast (graph-parser/graph-ast v)\n          nm* (-> g-ast (#(into {:graph-ast %})) (nodes-map*))\n          n-hierarchy (nodes-hierarchy nm*)\n          fold-ui (get-in app-state [:ui :fold] {})\n          new-fold-ui (if (seq fold-ui)\n                        fold-ui\n                        (all-instances-of-node-with-same-open-state ;; If we are loading the page, we don't have information about which nodes are opened, so we use what is loaded in nodes-map from graph-text.\n                          nm*\n                          n-hierarchy))]\n      ;; (tap> {:new-fold-ui new-fold-ui})\n      {:fx [[:dispatch-later {:ms 20 :dispatch [::set-nodes-positions]}]]\n       :db (-> app-state\n             (assoc-in [:ui :fold] new-fold-ui)\n             (assoc-in [:domain :graph-text] v)\n             (assoc-in [:ui :validation :valid-graph-ast] g-ast)\n             (assoc-in [:ui :validation :valid-graph?] true)\n             (#(do (js/console.log \"Jp\" %) %)))})\n    (catch :default _\n      {:fx [[:dispatch-later {:ms 20 :dispatch [::set-nodes-positions]}]]\n       :db (-> app-state\n             (assoc-in [:domain :graph-text] v)\n             (assoc-in [:ui :validation :valid-graph?] false))})))\n(re-frame/reg-event-fx ::set-graph-text [event-to-analytics] set-graph-text)\n\n(defn toggle-open-close\n  [app-state [event path]]\n  (let [new-state (not (get-in app-state (concat [:ui :fold] path [:opened?]) false))]\n    (-> app-state\n      (assoc-in (concat [:ui :fold] path [:opened?]) new-state)\n      (assoc-in [:domain :nodes-map (last path) :opened?] new-state)\n      (set-nodes-positions [event nil]))))\n\n(re-frame/reg-fx\n  :prepare-to-ctrl-c-selected-nodes\n  (fn []\n    (let [selection-el (-> js/document (.getElementById \"selection\"))\n          range (-> js/document .createRange)]\n      (-> js/window .getSelection .removeAllRanges)\n      (-> range (.selectNodeContents selection-el))\n      (-> js/window .getSelection (.addRange range)))))\n\n(re-frame/reg-event-fx\n  ::prepare-to-ctrl-c-selected-nodes\n  (fn []\n    {:fx [[:prepare-to-ctrl-c-selected-nodes]]}))\n\n(defn nodes-list-item-clicked\n  [{app-state :db} [event path]]\n  (let [selected-nodes (get-in app-state [:ui :selected-nodes] #{})\n        clicked-node (last path)\n        nodes-map (get-in app-state [:domain :nodes-map])\n        clicked-and-descendents (get-descendents nodes-map #{clicked-node})\n        sel-cli-inter (set/intersection selected-nodes clicked-and-descendents)\n        new-selection (if (= sel-cli-inter clicked-and-descendents)\n                        (set/difference selected-nodes clicked-and-descendents)\n                        (set/union selected-nodes clicked-and-descendents))]\n    {:fx [[:dispatch-later {:ms 30 :dispatch [::prepare-to-ctrl-c-selected-nodes]}]\n          [:dispatch-later {:ms 20 :dispatch [::set-nodes-positions]}]]\n     :db (if (get-in app-state [:ui :mouse-select-mode] false)\n           (assoc-in app-state [:ui :selected-nodes] new-selection)\n           (toggle-open-close app-state [event path]))}))\n(re-frame/reg-event-fx\n  ::nodes-list-item-clicked\n  [event-to-analytics]\n  nodes-list-item-clicked)\n\n(defn round-by [step pos]\n  (* step (js/Math.round (/ pos step))))\n\n(defn set-vis-view\n  [app-state [_event {:keys [view-position scale]}]]\n  (assoc-in app-state [:ui :vis-view] {:position view-position :scale scale}))\n(re-frame/reg-event-db ::set-vis-view set-vis-view)\n\n;; It used to receive the nodes-positions, now it just compute it from the bounding box.\n(defn set-nodes-positions\n  [app-state [event {:keys [dragging? _view-position _scale] :as args}]]\n  (if dragging?\n    app-state\n    (let [visible-nodes-ids (get-in app-state [:ui :f-visible-nodes])\n          nodes (map\n                  #(assoc (bounding-box->dimensions (.getBoundingBox @network %)) :id %)\n                  visible-nodes-ids)\n          ;; nodes (map #(update % :width (partial + 10)) nodes)\n          height (- (apply max (map #(+ (:y %) (/ (:height %) 2)) nodes))\n                    (apply min (map #(- (:y %) (/ (:height %) 2)) nodes)))\n          width (- (apply max (map #(+ (:x %) (/ (:width %) 2)) nodes))\n                   (apply min (map #(- (:x %) (/ (:width %) 2)) nodes)))\n          tree (-> (quad/->bounds 0 0 (* 2 width) (* 2 height))\n                 (quad/->quadtree (count visible-nodes-ids) 8))\n          sorted-nodes (sort-by #(distance-between [0 0] [(:x %) (:y %)]) nodes) ;; TODO Do I really need to sort?\n          ;; Use a quadtree to insert nodes that do not overlap.\n          filled-tree (reduce\n                        (fn [tree node]\n                          (let [;; For the quadtree lib, the x,y point is at the top left instead of the middle.\n                                initial-pos [(- (:x node) (/ (:width node) 2)) (- (:y node) (/ (:height node) 2))]\n                                ;; Iterate over the points given by the geometric-spiral fn\n                                possible-positions (cons initial-pos (geometric-spiral initial-pos (/ (:width node) 2)))\n                                [good-x good-y :as _non-collliding-pos] (get-pred (fn [[x y]]\n                                                                                    ;; Verify if it collides\n                                                                                    (empty? (quad/retrieve-intersections tree (assoc node :x x :y y))))\n                                                                                  possible-positions)]\n                            ;; update x y coordinates\n                            ;; insert\n                            (quad/insert tree (assoc node :x good-x :y good-y))))\n                        tree sorted-nodes)\n          ;; reduce it to put in the format accepted by the ::set-nodes-positions evt\n          new-nodes-positions (into {} (map #(into {(:id %) {:position {\"x\" (+ (:x %) (/ (:width %) 2)) \"y\" (+ (:y %) (/ (:height %) 2))}}}) (:objects filled-tree)))]\n      (-> app-state\n        ;; (assoc-in [:ui :graph-dragging?] dragging?)\n        (update-in [:domain :nodes-map] #(merge-with merge % new-nodes-positions))))))\n        ;; (set-vis-view [event args])))))\n(re-frame/reg-event-db ::set-nodes-positions [event-to-analytics] set-nodes-positions)\n\n(defn clear-nodes-positions\n  [{app-state :db}]\n  {:fx [[:dispatch-later {:ms 40 :dispatch [::set-nodes-positions]}]]\n   :db (update-in app-state [:domain :nodes-map] #(into {} (for [[k v] %] {k (dissoc v :position)})))})\n(re-frame/reg-event-fx ::clear-nodes-positions [event-to-analytics] clear-nodes-positions)\n\n(defn drag-changed\n  [app-state [_event dragging?]]\n  (assoc-in app-state [:ui :graph-dragging?] dragging?))\n(re-frame/reg-event-db ::drag-changed [event-to-analytics] drag-changed)\n\n(defn toggle-hidden\n  [app-state [event node-id]]\n  ;; (tap> {:c3 (get-in app-state [:ui :nodes])})\n  (-> app-state\n    (update-in [:domain :nodes-map node-id :hidden?] not)\n    (set-nodes-positions [event nil])))\n(re-frame/reg-event-db ::toggle-hidden [event-to-analytics] toggle-hidden)\n\n(defn node-hovered\n  [app-state [_event nodes-ids]]\n  ;; (tap> {:node-hovered node-id})\n  (assoc-in app-state [:ui :hovered-node] nodes-ids))\n(re-frame/reg-event-db ::node-hovered node-hovered)\n\n(defn debug-event\n  [app-state [_event path value]]\n  (assoc-in app-state path value))\n(re-frame/reg-event-db ::debug-event debug-event)\n\n(defn organize-hierarchy-positions\n  [{app-state :db} [event v]]\n  {:fx [[:dispatch-later {:ms 20 :dispatch [::organize-hierarchy-positions-step-2]}]]\n   :db (-> app-state\n         (assoc-in [:ui :vis-options :layout :hierarchical :enabled] v)\n         (set-nodes-positions [event nil]))})\n(re-frame/reg-event-fx ::organize-hierarchy-positions [event-to-analytics] organize-hierarchy-positions)\n\n(defn organize-hierarchy-positions-step-2\n  \"Used when 'hierarchy layout' button is clicked.\"\n  [app-state [event]]\n  (if (vis-option-hierarchy app-state)\n    (-> app-state\n      (set-nodes-positions [event {:dagging? false\n                                   :view-position (get-in app-state [:ui :vis-view :position])\n                                   :scale (get-in app-state [:ui :vis-view :scale])}])\n      (assoc-in [:ui :vis-options :layout :hierarchical :enabled] false))\n    app-state))\n(re-frame/reg-event-db ::organize-hierarchy-positions-step-2 organize-hierarchy-positions-step-2)\n\n(defn hide-all-or-selected\n  [app-state]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        all-nodes (-> app-state (get-in [:domain :nodes-map] {}) (keys))\n        nodes-to-hide (if (seq selected-nodes) selected-nodes all-nodes)\n        hidden (->> nodes-to-hide\n                 (map (fn [node-id] {node-id {:hidden? true}}))\n                 (into {}))]\n    (update-in app-state [:domain :nodes-map] #(merge-with merge % hidden))))\n(re-frame/reg-event-db ::hide-all-or-selected [event-to-analytics] hide-all-or-selected)\n\n(defn show-selected\n  [{app-state :db}]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        unhidden (->> selected-nodes\n                   (map (fn [node-id] {node-id {:hidden? false}}))\n                   (into {}))]\n    {:fx [[:dispatch-later {:ms 20 :dispatch [::set-nodes-positions]}]]\n     :db (update-in app-state [:domain :nodes-map] #(merge-with merge % unhidden))}))\n(re-frame/reg-event-fx ::show-selected [event-to-analytics] show-selected)\n\n(defn collapse-all-or-selected\n  [{app-state :db}]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        all-nodes (-> app-state (get-in [:domain :nodes-map] {}) (keys))\n        nodes-to-collapse (if (seq selected-nodes) selected-nodes all-nodes)\n        closed (->> nodes-to-collapse\n                 (map (fn [node-id] {node-id {:opened? false}}))\n                 (into {}))\n        close-all-instances #(all-instances-of-node-with-same-open-state-with-default closed %)]\n    {:fx [[:dispatch-later {:ms 20 :dispatch [::set-nodes-positions]}]]\n     :db (update-in app-state [:ui :fold] close-all-instances)}))\n(re-frame/reg-event-fx ::collapse-all-or-selected [event-to-analytics] collapse-all-or-selected)\n\n(defn expand-selected\n  [{app-state :db}]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        opened (->> selected-nodes\n                 (map (fn [node-id] {node-id {:opened? true}}))\n                 (into {}))\n        open-all-instances #(all-instances-of-node-with-same-open-state-with-default opened %)]\n    {:fx [[:dispatch-later {:ms 20 :dispatch [::set-nodes-positions]}]]\n     :db (update-in app-state [:ui :fold] open-all-instances)}))\n(re-frame/reg-event-db ::expand-selected [event-to-analytics] expand-selected)\n\n(defn mouse-select-mode-evt\n  [app-state [_event state]]\n  (assoc-in app-state [:ui :mouse-select-mode] state))\n(re-frame/reg-event-db ::mouse-select-mode [event-to-analytics] mouse-select-mode-evt)\n\n(defn network-clicked\n  [{app-state :db} [_event nodes]]\n  (let [toggly-add #(set/difference (set/union %1 %2) (set/intersection %1 %2))]\n    {:fx [[:dispatch-later {:ms 30 :dispatch [::prepare-to-ctrl-c-selected-nodes]}]]\n     :db (if (get-in app-state [:ui :mouse-select-mode] false)\n           (update-in app-state [:ui :selected-nodes] #(toggly-add (set %) nodes))\n           (assoc-in app-state [:ui :selected-nodes] nodes))}))\n(re-frame/reg-event-fx ::network-clicked [event-to-analytics] network-clicked)\n\n(defn rerender-vis-sub\n  [app-state]\n  (get-in app-state [:ui :rerender-vis] false))\n(re-frame/reg-sub ::rerender-vis-sub rerender-vis-sub)\n\n(defn rerender-vis\n  [app-state]\n  (update-in app-state [:ui :rerender-vis] not))\n(re-frame/reg-event-db ::rerender-vis rerender-vis)\n\n(defn toggle-edit-graph-text-area\n  [app-state]\n  (update-in app-state [:ui :editing-graph-text] not))\n(re-frame/reg-event-db ::toggle-edit-graph-text-area [event-to-analytics] toggle-edit-graph-text-area)\n\n(defn select-source\n  [{app-state :db}]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        vis-edges-from (-> app-state :ui :f-vis-data :edges (->> (filter #(contains? selected-nodes (:to %)))) (->> (map :from)) set)]\n    {:fx [[:dispatch-later {:ms 30 :dispatch [::prepare-to-ctrl-c-selected-nodes]}]]\n     :db (assoc-in app-state [:ui :selected-nodes] vis-edges-from)}))\n(re-frame/reg-event-fx ::select-source [event-to-analytics] select-source)\n\n(defn select-target\n  [{app-state :db}]\n  (let [selected-nodes (-> app-state :ui :f-selected-nodes)\n        vis-edges-to (-> app-state :ui :f-vis-data :edges (->> (filter #(contains? selected-nodes (:from %)))) (->> (map :to)) set)]\n    {:fx [[:dispatch-later {:ms 30 :dispatch [::prepare-to-ctrl-c-selected-nodes]}]]\n     :db (assoc-in app-state [:ui :selected-nodes] vis-edges-to)}))\n(re-frame/reg-event-fx ::select-target [event-to-analytics] select-target)\n\n(comment\n  (require '[re-frame.db])\n  (clojure.set/union #{1 2} #{3 4})\n  (->> @re-frame.db/app-db\n    (#(get-in % [:domain :nodes-map]))\n    (filter #(#{\"FilhosDeMinervinaEElpidio\"} (first %)))\n    (map second)\n    (mapcat :children)\n    (concat #{\"FilhosDeMinervinaEElpidio\"}))\n    ;; (first))\n  (->> @re-frame.db/app-db\n    (#(get-in % [:domain :nodes-map]))\n    (map (fn [[k {:keys [position]}]]\n           {k [(get position \"x\") (get position \"y\")]}))\n    (into {}))\n\n  (do\n    (def app-state @re-frame.db/app-db)\n    (def visible-nodes-ids (get-in app-state [:ui :f-visible-nodes]))\n    (def nodes (map\n                 #(let [bounding-box (.getBoundingBox @network %)]\n                    (assoc (bounding-box->dimensions bounding-box)\n                      :id %\n                      :bounding-box bounding-box))\n                 visible-nodes-ids))\n    (def x-min (apply min (map #(.-left (:bounding-box %)) nodes)))\n    (def x-max (apply max (map #(.-right (:bounding-box %)) nodes)))\n    (def y-min (apply min (map #(.-top (:bounding-box %)) nodes)))\n    (def y-max (apply max (map #(.-bottom (:bounding-box %)) nodes)))\n    (def desired-width 2000)\n    (def desired-height 1000)\n    (def new-nodes-positions (into {} (map #(into {(:id %) {\"x\" (* desired-width (/ (- (:x %) x-min) (- x-max x-min))) \"y\" (* desired-height (/ (- (:y %) y-min) (- y-max y-min)))}}) nodes)))\n    (>evt [::set-nodes-positions\n           {:dagging? false\n            :nodes-positions* new-nodes-positions\n            :view-position (get-in @re-frame.db/app-db [:ui :vis-view :position])\n            :scale (get-in @re-frame.db/app-db [:ui :vis-view :scale])}]))\n\n\n  (do\n    (def app-state @re-frame.db/app-db)\n    (def visible-nodes-ids (get-in app-state [:ui :f-visible-nodes]))\n    (def nodes (map\n                 #(let [bounding-box (.getBoundingBox @network %)]\n                    (assoc (bounding-box->dimensions bounding-box)\n                      :id %\n                      :bounding-box bounding-box))\n                 visible-nodes-ids))\n    (def height (- (apply max (map #(.-bottom (:bounding-box %)) nodes))\n                   (apply min (map #(.-top (:bounding-box %)) nodes))))\n    (def width (- (apply max (map #(.-right (:bounding-box %)) nodes))\n                  (apply min (map #(.-left (:bounding-box %)) nodes))))\n    (def tree (-> (quad/->bounds 0 0 width height)\n                (quad/->quadtree (count visible-nodes-ids) 3))))\n\n  (sort-by #(distance-between [0 0] [(:x %) (:y %)]) nodes)\n  sorted-nodes\n\n  ;; Uma volta \u00e9 2*pi. Eu quero c\u00edrculos que v\u00e3o aumentando, ent\u00e3o eu posso ter um b (ration) baixo e pegar algumas quantidades de pontos e ir ignorando v\u00e1rios e pegar outra quantidade.\n  ;; A quantidade de pontos que vou pegar vai provavelmente ser definida pelo angle-step, que \u00e9 quanto ele rotaciona por step.\n  (doseq [[x y] (take 500 (geometric-spiral [0 0] 20 1.24 0.22))]\n    (print (str \"(\"x\",\"y\")\\n\")))\n\n  (.getPositions @network)\n\n  (and (< (.-top n1) (.-top n2))\n       (< (.-bottom n1) (.-top n2)))\n\n  (.getPosition @network \"user-device/UserDevice\")\n  (bounding-box->dimensions (.getBoundingBox @network \"user-device/UserDevice\"))\n  (quad/retrieve-intersections tree (bounding-box->dimensions (.getBoundingBox @network \"user-device/UserDevice\"))))\n\n;; -- Views ----\n\n;; (defn draw-graph-no-memo [id data options]\n;;   (fn []\n;;     (let [container (-> js/document (.getElementById id))\n;;           network (-> js/vis .-Network (new container data options))]\n;;       ;; (.on network \"dragEnd\" #(>evt [::set-vis-nodes-positions ^Object (.getPositions network)]) )\n;;       (def network network)\n;;       network)))\n;;\n;; (def draw-graph (memoize draw-graph-no-memo))\n\n(defn graph-component-inner []\n  (let [graph-component-id \"looset-graph\"\n        update-comp (fn [component [_ prev-props]]\n                      (let [prev-vis-data (:vis-data prev-props)\n                            {:keys [selected-nodes vis-data options view]} (reagent/props component)]\n                        ;; (def network network)\n                        ^js (.setOptions @network options)\n                        ;; (tap> {:vis-data vis-data})\n                        (when (not= prev-vis-data vis-data)\n                          (.setData @network (clj->js vis-data)))\n                        (when view\n                          (.moveTo @network #js {:position (:position view)\n                                                 :scale (:scale view)}))\n                        (.selectNodes @network selected-nodes)))\n        mount-comp (fn [component]\n                     (let [container (-> js/document (.getElementById graph-component-id))]\n                       (reset! network (-> vis-network .-Network (new container nil #_options))))\n                     (.on @network \"dragStart\" #_(js/console.log \"dragStart\") #(>evt [::drag-changed true]))\n                     (.on @network \"dragEnd\" #(>evt [::set-vis-view {:view-position ^Object (.getViewPosition @network)\n                                                                     :scale ^Object (.getScale @network)}]))\n                     (.on @network \"zoom\" #(>evt [::set-vis-view {:view-position ^Object (.getViewPosition @network)\n                                                                  :scale ^Object (.getScale @network)}]))\n                     (.on @network \"click\" #(do (>evt [::network-clicked (set ^js(.-nodes %))])\n                                                (when (empty? ^js(.-nodes %)) ;; To avoid the automatic behavior of deselecting all nodes.\n                                                  (>evt [::rerender-vis]))))\n                     (update-comp component nil))]\n    (reagent/create-class\n      {:reagent-render (fn []\n                         [:div\n                          {:id graph-component-id\n                           :style #js {:height \"100%\" :width \"100%\"\n                                       :opacity (if (<sub [::valid-graph?]) \"100%\" \"40%\")}}\n                          [:p \"Loading..\"]])\n       :component-did-mount mount-comp\n       :component-did-update update-comp})))\n\n(defn graph-component []\n  [graph-component-inner\n   {:rerender (<sub [::rerender-vis-sub])\n    :selected-nodes (clj->js (<sub [::selected-nodes-visible]))\n    :vis-data       @(re-frame/sub :flow {:id :f-vis-data})\n    :number-input (<sub [::number-input 1])\n    :number-input2 (<sub [::number-input 2])\n    :view (<sub [::vis-view])\n    :options #js {:layout #js {:hierarchical #js {:enabled (<sub [::vis-option-hierarchy])\n                                                  :direction \"UD\"\n                                                  :sortMethod \"directed\"\n                                                  :shakeTowards \"roots\"}}\n                                                  ;; :nodeSpacing (int (<sub [::number-input]))}}\n                  :physics #js {:enabled false\n                                :minVelocity 1\n                                :barnesHut\n                                #js {:gravitationalConstant (<sub [::number-input 1])\n                                     :centralGravity (* 0.01 (<sub [::number-input 2]))}}\n\n                                ;; :hierarchicalRepulsion #js {:avoidOverlap 1\n                                ;;                             :nodeDistance 300}}\n                  ;; :minVelocity 1.2}\n                  :nodes #js {:borderWidth 1}}}])\n                              ;; :mass 0.5}}}])\n\n    ;; :options #js {:physics #js {:enabled true\n    ;;                             :minVelocity 1.5}\n    ;;               :nodes #js {:borderWidth 1}}}])\n    ;;\n\n(defn panel-splitter []\n  [:div {:style {:display \"flex\"\n                 :justify-content \"center\"\n                 :width \"6px\"\n                 :height \"100vh\"\n                 :cursor \"ew-resize\"}\n         :onMouseDown #(>evt [::resizing-panels true])}\n   [:div {:style {:border-left \"1px solid gray\"}}]])\n\n(defn botton-buttons []\n  [:div\n   {:style {:display \"flex\"\n            :justify-content \"space-evenly\"\n            :padding \"10px\"}}\n   [:button\n    {:title \"edit graph\"\n     :onClick #(>evt [::toggle-edit-graph-text-area])\n     :class (if @(re-frame/sub :flow {:id :f-editing-graph-text})\n              \"button-1 active\"\n              \"button-1\")}\n    [:svg\n     {:width \"30\" :height \"30\" :fill \"currentColor\" :viewBox \"0 0 16 16\" :xmlns \"http://www.w3.org/2000/svg\"}\n     [:path {:fill-rule \"evenodd\" :d \"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"}]\n     [:path {:fill-rule \"evenodd\" :d \"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z\"}]]]\n   [:a {:target \"_blank\" :href \"https://docs.google.com/forms/d/e/1FAIpQLSc5SouA_vEHW8jqYrbt7IASidgaTngEwlclkrgeQ6RQXzM5nA/viewform?usp=sf_link\"}\n    [:button.button-1\n     {:title \"Feedback\"}\n     [:svg\n      {:width \"30\" :height \"30\" :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n      [:path {:d \"M6.956 14.534c.065.936.952 1.659 1.908 1.42l.261-.065a1.378 1.378 0 0 0 1.012-.965c.22-.816.533-2.512.062-4.51.136.02.285.037.443.051.713.065 1.669.071 2.516-.211.518-.173.994-.68 1.2-1.272a1.896 1.896 0 0 0-.234-1.734c.058-.118.103-.242.138-.362.077-.27.113-.568.113-.856 0-.29-.036-.586-.113-.857a2.094 2.094 0 0 0-.16-.403c.169-.387.107-.82-.003-1.149a3.162 3.162 0 0 0-.488-.9c.054-.153.076-.313.076-.465a1.86 1.86 0 0 0-.253-.912C13.1.757 12.437.28 11.5.28H8c-.605 0-1.07.08-1.466.217a4.823 4.823 0 0 0-.97.485l-.048.029c-.504.308-.999.61-2.068.723C2.682 1.815 2 2.434 2 3.279v4c0 .851.685 1.433 1.357 1.616.849.232 1.574.787 2.132 1.41.56.626.914 1.28 1.039 1.638.199.575.356 1.54.428 2.591z\"}]]\n     [:svg\n      {:width \"30\" :height \"30\" :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n      [:path {:d \"M6.956 1.745C7.021.81 7.908.087 8.864.325l.261.066c.463.116.874.456 1.012.965.22.816.533 2.511.062 4.51a9.84 9.84 0 0 1 .443-.051c.713-.065 1.669-.072 2.516.21.518.173.994.681 1.2 1.273.184.532.16 1.162-.234 1.733.058.119.103.242.138.363.077.27.113.567.113.856 0 .289-.036.586-.113.856-.039.135-.09.273-.16.404.169.387.107.819-.003 1.148a3.163 3.163 0 0 1-.488.901c.054.152.076.312.076.465 0 .305-.089.625-.253.912C13.1 15.522 12.437 16 11.5 16H8c-.605 0-1.07-.081-1.466-.218a4.82 4.82 0 0 1-.97-.484l-.048-.03c-.504-.307-.999-.609-2.068-.722C2.682 14.464 2 13.846 2 13V9c0-.85.685-1.432 1.357-1.615.849-.232 1.574-.787 2.132-1.41.56-.627.914-1.28 1.039-1.639.199-.575.356-1.539.428-2.59z\"}]]]]])\n\n(defn svg-eye\n  [props]\n  [:svg#eye.hover-gray-svg\n   (merge\n     props\n     {:fill \"currentColor\" :viewBox \"0 0 16 16\" :xmlns \"http://www.w3.org/2000/svg\"})\n   [:path {:fill-rule \"evenodd\" :d \"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z\"}]\n   [:path {:fill-rule \"evenodd\" :d \"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z\"}]])\n\n(defn svg-filled-eye\n  [props]\n  [:svg#eye.hover-gray-svg\n   (merge\n     props\n     {:fill \"#4a484a\" :viewBox \"0 0 16 16\" :xmlns \"http://www.w3.org/2000/svg\"})\n   [:path {:fill-rule \"evenodd\" :d \"M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\"}]\n   [:path {:fill-rule \"evenodd\" :d \"M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z\"}]])\n\n(defn node-view\n  [{:keys [class]\n    {:keys [color]} :style\n    {:keys [level hidden? path node-id]} :node}\n   text]\n  (let [selected-node? (<sub [::selected-node? node-id])\n        mouse-select-mode (<sub [::mouse-select-mode])\n        foldable-node? (<sub [::foldable-node? node-id])]\n    [:div\n     {:style {:paddingLeft (+ 5 (* 12 level))}\n      :class class\n      :onMouseOver #(>evt [::node-hovered #{node-id}])\n      :onMouseOut #(>evt [::node-hovered #{}])}\n     (if hidden?\n       [svg-eye\n        {:onClick #(>evt [::toggle-hidden node-id])\n         :style {:paddingRight 6}\n         :width \"27\" :height \"27\"}]\n       [svg-filled-eye\n        {:onClick #(>evt [::toggle-hidden node-id])\n         :style {:paddingRight 6}\n         :width \"27\" :height \"27\"}])\n     [:div\n      {:onClick #(>evt [::nodes-list-item-clicked path])\n       :class (str (when selected-node? \"selected-shadow \")\n                   (cond\n                     mouse-select-mode \"hover-gray select-mode-cursor\"\n                     foldable-node? \"hover-gray\"\n                     :else \"\"))\n       :style {:color (or color \"inherit\")}}\n      text]]))\n\n(defn svg-label\n  [{:keys [color opened?]}]\n  (let [rotation-degree (if opened? \"45\" \"0\")]\n    [:svg\n     {:width \"20.3125\" :height \"13\"\n      :transform (str \"rotate (\"rotation-degree\")\")\n      :viewBox (str \"20 0 15 32\")}\n     [:g\n      [:rect\n       {:fill color\n        :width \"26.326736\" :height \"27.940695\"\n        :x \"4\"\n        :y \"4\"\n        :ry \"3.7885695\"}]\n      [:path {:fill color\n              :d \"m 24,4 9.30351,0.007 13.81581,13.815798 -13.8158,14.110975 -11.32617,0.007\"}]]]))\n\n(defn svg-arrow-triangle\n  [{:keys [opened?]}]\n  (let [rotation-degree (if opened? \"0\" \"-90\")]\n    [:svg\n     {:width \"16\" :height \"16\" :viewBox \"0 0 16 16\" :fill \"#4a484a\"\n      :transform (str \"rotate (\"rotation-degree\")\")\n      :style {:verticalAlign \"middle\"}}\n     [:path {:d \"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"}]]))\n\n(defn label-node [{:keys [node-id color opened?] :as node-item}]\n  (let [node-name (<sub [::nodes-map-name node-id])]\n    [node-view\n     {:node node-item\n      :class \"label-style\"\n      :style {:color color}}\n     [:<>\n       [svg-label {:opened? opened?\n                   :color color}]\n       (or node-name node-id)]]))\n\n(defn lix-node [{:keys [node-id opened?] :as node-item}]\n  [node-view\n   {:node node-item\n    :class \"lix-style\"}\n   [:<>\n     (when-not (nil? opened?)\n       [svg-arrow-triangle {:opened? opened?}])\n     node-id]])\n\n(defn nodes-list-view []\n  [:div\n   {:style {:opacity (if (<sub [::valid-graph?]) \"100%\" \"40%\")}}\n   (for [node-item (<sub [::fold-list])\n         :let [node-type-comp ({:label label-node :lix lix-node} (:node-type node-item))]]\n     ;; ^{:key text} ;; Somehow I'm using this key wrongly, if it's uncomment, the items repeat depending on the change.\n     [node-type-comp node-item])])\n\n(def black-cursor-svg-path \"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\")\n\n(defn left-buttons []\n  (let [icons-size \"22\"]\n    [:div\n     {:style {:position \"relative\"\n              :height \"0px\"\n              :z-index \"10\"}}\n     [:div\n      {:style {:z-index \"10\"\n               :display \"flex\"\n               :flex-direction \"column\"\n               :align-items \"flex-start\"\n               :padding \"10px\"\n               :inline-size \"fit-content\"}}\n      [:button.button-2\n       {:title \"move (shortcut: v)\"\n        :onClick #(>evt [::mouse-select-mode false])}\n       [:svg\n        {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n        [:path {:fill-rule \"evenodd\" :d \"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103zM2.25 8.184l3.897 1.67a.5.5 0 0 1 .262.263l1.67 3.897L12.743 3.52z\"}]]]\n      [:button.button-2\n       {:title \"select (shortcut: s)\"\n        :onClick #(>evt [::mouse-select-mode true])}\n       [:svg\n        {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n        [:path {:fill-rule \"evenodd\" :d black-cursor-svg-path}]]]\n      ;; [:button.button-2.black-background\n      ;;  {:title \"select inverse\"\n      ;;   :onClick #(>evt [::mouse-select-mode true])}\n      ;;  [:svg\n      ;;   {:width icons-size :height icons-size :fill \"#dddddd\" :viewBox \"0 0 16 16\"}\n      ;;   [:path {:fill-rule \"evenodd\" :d black-cursor-svg-path}]]]\n      [:div\n       {:style {:height \"2px\"\n                :width \"28px\"\n                :background-color \"#000000a1\"\n                :align-self \"center\"\n                :margin \"3px 0px\"}}]\n      [:button.button-2\n       {:title \"hierarchy layout\"\n        :onClick #(>evt [::organize-hierarchy-positions true])}\n       [:svg\n        {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n        [:path {:fill-rule \"evenodd\" :d \"M0 1.5A1.5 1.5 0 0 1 1.5 0h13A1.5 1.5 0 0 1 16 1.5v13a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 14.5zM1.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5H5V1zM10 15V1H6v14zm1 0h3.5a.5.5 0 0 0 .5-.5v-13a.5.5 0 0 0-.5-.5H11z\"}]]]\n      [:button.button-2\n       {:title \"default layout\"\n        :onClick #(>evt [::clear-nodes-positions])}\n       [:svg\n        {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n        [:path {:fill-rule \"evenodd\" :d \"M5 1v8H1V1zM1 0a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1zm13 2v5H9V2zM9 1a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM5 13v2H3v-2zm-2-1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1zm12-1v2H9v-2zm-6-1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1z\"}]]]\n      (if (<sub [::show-unhide-button?])\n        [:button.button-2\n         {:title \"show selected\"\n          :onClick #(>evt [::show-selected])}\n         [:svg\n           {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n           [:path {:fill-rule \"evenodd\" :d \"M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\"}]\n           [:path {:fill-rule \"evenodd\" :d \"M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z\"}]]]\n        [:button.button-2\n         {:title \"hide all selected\"\n          :onClick #(>evt [::hide-all-or-selected])}\n         [:svg\n          {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n          [:path {:fill-rule \"evenodd\" :d \"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z\"}]\n          [:path {:fill-rule \"evenodd\" :d \"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z\"}]]])\n      (if @(re-frame/sub :flow {:id :f-show-expand-button?})\n        [:button.button-2\n         {:title \"expand selected\"\n          :onClick #(>evt [::expand-selected])}\n         [:svg\n          {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n          [:path {:fill-rule \"evenodd\" :d \"M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8M7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10\"}]]]\n        [:button.button-2\n         {:title \"collapse all\"\n          :onClick #(>evt [::collapse-all-or-selected])}\n         [:svg\n          {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n          [:path {:fill-rule \"evenodd\" :d \"M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8zm7-8a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 4.293V.5A.5.5 0 0 1 8 0zm-.5 11.707-1.146 1.147a.5.5 0 0 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 11.707V15.5a.5.5 0 0 1-1 0v-3.793z\"}]]])\n      (let [disable? @(re-frame/sub :flow {:id :disable-select-source-target-button?})]\n        [:<>\n         [:button.button-2\n          {:title \"select source\"\n           :onClick #(>evt [::select-source])\n           :style (when disable?\n                    {:borderColor \"#00000024\"\n                     :cursor \"not-allowed\"})}\n          [:svg\n           {:width icons-size :height icons-size :fill (if disable? \"#00000024\" \"currentColor\") :viewBox \"0 0 16 16\"}\n           [:path {:fill-rule \"evenodd\" :d \"M3.5 10a.5.5 0 0 1-.5-.5v-8a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 0 0 1h2A1.5 1.5 0 0 0 14 9.5v-8A1.5 1.5 0 0 0 12.5 0h-9A1.5 1.5 0 0 0 2 1.5v8A1.5 1.5 0 0 0 3.5 11h2a.5.5 0 0 0 0-1z\"}]\n           [:path {:fill-rule \"evenodd\" :d \"M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708z\"}]]]\n         [:button.button-2\n          {:title \"select target\"\n           :onClick #(>evt [::select-target])\n           :style (when disable?\n                    {:borderColor \"#00000024\"\n                     :cursor \"not-allowed\"})}\n          [:svg\n           {:width icons-size :height icons-size :fill (if disable? \"#00000024\" \"currentColor\") :viewBox \"0 0 16 16\"}\n           [:path {:fill-rule \"evenodd\" :d \"M3.5 6a.5.5 0 0 0-.5.5v8a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-8a.5.5 0 0 0-.5-.5h-2a.5.5 0 0 1 0-1h2A1.5 1.5 0 0 1 14 6.5v8a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-8A1.5 1.5 0 0 1 3.5 5h2a.5.5 0 0 1 0 1z\"}]\n           [:path {:fill-rule \"evenodd\" :d \"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708z\"}]]]])\n      [:button.button-2.drag-button\n       {:title \"dispersion (click, hold and drag)\"\n        :onMouseDown #(let [canvas (first (js/document.getElementsByTagName \"canvas\"))]\n                        (-> (.requestPointerLock canvas #_(clj->js {:unadjustedMovement true}))\n                          (.then (fn []\n                                   (js/console.log \"Pointer lock acquired.\")))\n                          (.catch (fn [err]\n                                    (js/console.error \"Pointer lock failed:\" err))))\n\n                        (>evt [::dispersing-nodes true]))}\n       [:svg\n        {:width icons-size :height icons-size :fill \"currentColor\" :viewBox \"0 0 16 16\"}\n        [:path {:fill-rule \"evenodd\" :d \"M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707m4.344-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707\"}]]]]]))\n\n(def code-font-family \"dejavu sans mono, monospace\")\n(def code-font-size \"small\")\n(def code-margin \"0\")\n(def code-padding \"0 10px\")\n\n(defn edit-raw-graph-text []\n  [:textarea\n   {:style {:flex-grow \"1\"\n            :margin code-margin\n            :padding code-padding\n            :min-height \"20vw\"\n            :font-family code-font-family\n            :font-size code-font-size}\n    :onChange #(>evt [::set-graph-text (-> % .-target .-value)])\n    :value @(re-frame/sub :flow {:id :graph-text}) #_(<sub [::graph-text])}])\n\n(defn debug-quick-val-set []\n  [:<>\n    [:<>\n     [:pre \"blabla\"]\n     [:span \"Range1 \"(<sub [::number-input 1])]\n     [:input {:type \"range\"\n              :min 1000\n              :max 4000\n              :value (<sub [::number-input 1])\n              :onChange #(>evt [::set-number-input (-> % .-target .-value) 1])}]\n     [:span \"Range2 \"(<sub [::number-input 2])]\n     [:input {:type \"range\"\n              :min 0\n              :max 100\n              :value (<sub [::number-input 2])\n              :onChange #(>evt [::set-number-input (-> % .-target .-value) 2])}]]\n    [:<> [:span \"Number\"] [:input {:type \"number\"\n                                   :value (<sub [::number-input 1])\n                                   :onChange #(>evt [::set-number-input (-> % .-target .-value)])}]]\n    [:<> [:span \"Toggle\"] [:input {:type \"checkbox\"\n                                   :onChange #(do (>evt [::set-toggle-input (-> % .-target .-checked)])\n                                                  (>evt [::organize-hierarchy-positions (-> % .-target .-checked)]))}]]])\n\n(def quattrocento-font \"Quattrocento, serif\")\n\n(defn global-style []\n  [:style\n   (str \"\n   @import url('https://fonts.googleapis.com/css2?family=Proza+Libre:wght@400;500;600;700&family=Quattrocento&family=Roboto+Mono:wght@300;400;500;600;700&display=swap');\n\n    *::-webkit-scrollbar-track {\n        background: rgb(51 51 51 / 10%);\n    }\n    *::-webkit-scrollbar-thumb {\n        background: #bbb;\n    }\n    *::-webkit-scrollbar {\n        width: 5px;\n        height: 5px;\n    }\n\n   .hover-gray-svg:hover {\n     filter: drop-shadow(0px 2px 6px #0008);\n     cursor: pointer;\n   }\n\n   .hover-gray:hover {\n     text-shadow: -5px 3px 7px;\n     cursor: pointer;\n   }\n\n   .selected-shadow {\n     text-shadow: -5px 3px 7px #59d0e8;\n   }\n\n   .button-1 {\n     display: flex;\n     background-color: #4c4c4c;\n     border-radius: 8px;\n     border-style: none;\n     box-sizing: border-box;\n     color: #FFFFFF;\n     cursor: pointer;\n     font-family: \"quattrocento-font\";\n     font-size: 14px;\n     font-weight: 500;\n     line-height: 20px;\n     list-style: none;\n     margin: 0;\n     outline: none;\n     padding: 10px;\n     position: relative;\n     text-align: center;\n     text-decoration: none;\n     transition: color 100ms;\n     vertical-align: baseline;\n     user-select: none;\n     -webkit-user-select: none;\n     touch-action: manipulation;\n   }\n\n   .button-1:hover,\n   .button-1:focus {\n     background-color: #7c7c7c;\n   }\n\n   .button-1.active {\n     background-color: #1b5f4b; /* Different color for active state */\n     color: #d1d1d1;\n     font-weight: 600; /* Slightly bolder text */\n   }\n\n   .button-2:active {\n     background-color: #00000020;\n   }\n\n   .button-2 {\n      background-color: #0000000d;\n      backdrop-filter: blur(3px);\n      border-radius: 8px;\n      border-style: solid;\n      border-width: 2px;\n      border-color: #000000a1;\n      box-sizing: border-box;\n      cursor: pointer;\n      padding: 4px;\n      margin: 4px 0px;\n      transition: color 100ms;\n      user-select: none;\n      -webkit-user-select: none;\n      touch-action: manipulation;\n   }\n\n   .black-background {\n      background-color: #000000;\n   }\n\n   .drag-button {\n      cursor: se-resize;\n   }\n\n   .lix-style {\n     display: flex;\n     flex-direction: row;\n     font-family: \"label-font-family\", sans-serif;\n     font-size: large;\n     padding-bottom: 10px;\n     align-items: center;\n     color: #4a484a;\n   }\n\n   .label-style {\n     display: flex;\n     flex-direction: row;\n     font-family: \"label-font-family\", sans-serif;\n     font-size: large;\n     font-weight: bold;\n     padding-bottom: 10px;\n     align-items: center;\n   }\n\n   .select-mode-cursor {\n     cursor: url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 16 16'%3E%3Cpath d='\"black-cursor-svg-path\"'/%3E%3C/svg%3E\\\" ) 19 0,crosshair !important;\n   }\n   \")])\n\n(defn ctrl-c-selected-nodes\n  \"This is a workaround to be able to copy the id of selected nodes.\n  It's a div that is outside of the viewport, its content is the selected nodes\n  and its text is selected when new nodes are selected. If ctrl-c is pressed,\n  then its text is copied.\"\n  []\n  [:div#selection\n   {:style {:position \"absolute\"\n            :top \"110vh\"\n            :padding-left \"50vw\"}}\n   (interleave (<sub [::raw-selected-nodes]) (repeat [:br]))])\n\n(defn main []\n  [:<>\n   [global-style]\n   [ctrl-c-selected-nodes]\n   [:div#panel-container\n    {:class (when (<sub [::mouse-select-mode])\n               \"select-mode-cursor\")\n     :style {:display \"flex\"\n             :user-select \"none\"\n             :max-height \"100vh\"}}\n    [:div#left-panel\n     {:style {:width (<sub [::left-panel-size])\n              :min-width \"20vw\"\n              :display \"flex\"\n              :flex-direction \"column\"}}\n     [:div {:style {:font-family quattrocento-font\n                    :font-size \"2em\"\n                    :padding \"10px\"\n                    :border-bottom \"1px solid gray\"}}\n      \"Looset Graph\"]\n     [left-buttons]\n     [util/error-boundary\n      {:if-error [:h2 \"erro\"]}\n      [graph-component]]]\n    [panel-splitter]\n    [:div#right-panel\n     {:style {:width (str \"calc(100vw - \"(<sub [::left-panel-size])\")\")\n              :overflow \"auto\"\n              :display \"flex\"\n              :flex-direction \"column\"\n              :min-width \"20vw\"}}\n     [:div#text-component\n       {:style {:overflow \"auto\"\n                :display \"grid\"\n                :flex-grow \"1\"\n                :padding \"7px 0\"}}\n       [util/error-boundary\n        {:if-error [:h2 \"erro\"]}\n        [nodes-list-view]]\n       (when @(re-frame/sub :flow {:id :f-editing-graph-text})\n         [edit-raw-graph-text])]\n     [botton-buttons]]]])\n     ;; [:div\n     ;;  (<sub [::fold-list])]\n     ;; [:div\n     ;;  (str @(re-frame/sub :flow {:id :f-editing-graph-text}))]]]])\n     ;; ;; This is for testing values in a fast way, can be plugged in different components.\n     ;; [debug-quick-val-set]]]])\n\n(defn set-toggle-input\n  [app-state [_event n]]\n  (assoc-in app-state [:ui :toggle-input] n))\n(re-frame/reg-event-db ::set-toggle-input set-toggle-input)\n\n(defn toggle-input\n  [app-state]\n  (get-in app-state [:ui :toggle-input] false))\n(re-frame/reg-sub ::toggle-input toggle-input)\n\n(defn set-number-input\n  [app-state [_event n knob]]\n  (-> app-state\n    (assoc-in [:ui :number-input knob] n)))\n    ;; (disperse-nodes-positions n n)))\n(re-frame/reg-event-db ::set-number-input set-number-input)\n\n(defn number-input\n  [app-state [_ knob]]\n  (get-in app-state [:ui :number-input knob] 0))\n(re-frame/reg-sub ::number-input number-input)\n\n;; -- Initialization ----\n\n(def initial-state\n  {:domain {:graph-text \"=>label1:\\n  node1\\n  node2\\n  node5\\n\\n=>label2:\\n  node5\\n\\nnode3:\\n  node4\\n  node5\\n\\nnode1 -> node2\\nnode4 -> node1\\nnodeA -> nodeB\"\n            :nodes-map {}}\n   :ui {:panels {:resizing-panels false\n                 :left-panel-size \"65vw\"}\n        :editing-graph-text false\n        :fold {}}})\n\n(defn gzip [cs-mode b-array]\n  (let [cs (-> \"gzip\" cs-mode.)\n        writer (-> cs .-writable .getWriter)]\n    (-> writer (.write b-array))\n    (-> writer .close)\n    (.arrayBuffer (js/Response. (-> cs .-readable)))))\n\n(defn gzip-compress [string]\n  (as-> string $\n    (.encode (js/TextEncoder.) $)\n    (gzip js/CompressionStream $)\n    (.then $ #(->> (js/Uint8Array. %)\n                (map char)\n                (apply str)))))\n\n(defn gzip-decompress [compressed-string]\n  (as-> compressed-string $\n    (map #(.charCodeAt % 0) $)\n    (js/Uint8Array. $)\n    (gzip js/DecompressionStream $)\n    (.then $ #(.decode (js/TextDecoder.) %))))\n\n(def set-url-state-interceptor\n  (re-frame.std-interceptors/on-changes\n    (fn [graph-text]\n      (.then (gzip-compress graph-text)\n             #(let [loc js/window.location]\n                (js/window.history.pushState\n                  graph-text nil\n                  (str loc.origin loc.pathname\"?graph=\"\n                       (js/encodeURIComponent (js/btoa %)))))))\n    nil [:domain :graph-text]))\n(re-frame/reg-global-interceptor set-url-state-interceptor)\n\n(defn init-url-history-observer []\n  (js/window.addEventListener\n    \"popstate\"\n    #(do (js/console.log \"back pressed\")\n         (js/console.log \"event\" (.-state %)))))\n         ;; (>evt [::set-graph-text (.-state %)]))))\n\n(defn init-mousemove []\n  (js/document.body.addEventListener\n    \"mousemove\"\n    #(>evt [::mouse-moved (-> % .-x) (-> % .-y)\n                          (-> % .-movementX) (-> % .-movementY)])))\n\n(defn init-keyboard-events []\n  (js/document.body.addEventListener\n    \"keypress\"\n    #(>evt [::keypress (-> % .-key)])))\n\n(re-frame/reg-event-fx\n  ::set-app-state\n  [event-to-analytics]\n  (fn [_ [event graph-text]]\n    (set-graph-text initial-state [event graph-text])))\n\n(defn init-state []\n  (let [compressed-graph (.get (js/URLSearchParams. js/window.location.search) \"graph\")\n        default-graph (get-in initial-state [:domain :graph-text])]\n    (if compressed-graph\n      (.then (gzip-decompress (js/atob compressed-graph))\n             #(re-frame/dispatch-sync [::set-app-state %]))\n      (re-frame/dispatch-sync [::set-app-state default-graph]))))\n\n;; Snippets about mouse-up event\n(defn mouse-up\n  [{app-state :db}]\n  {:fx [[:dispatch-later {:ms 20 :dispatch [::set-nodes-positions]}]]\n   :db (-> app-state\n         (resizing-panels [::mouse-up false])\n         (dispersing-nodes [::mouse-up false])\n         (assoc-in [:ui :diagram :zooming?] false)\n         (assoc-in [:ui :graph-dragging?] false))})\n(re-frame/reg-event-fx ::mouse-up mouse-up)\n(defn init-mouseup []\n  (js/document.body.addEventListener\n    \"mouseup\"\n    #(do\n       (js/document.exitPointerLock)\n       (>evt [::mouse-up false]))))\n\n;; Snippet on how to react on CSS change\n;; (defn init-style-observer []\n;;   (let [observer (new js/MutationObserver\n;;                    (fn [mutations]\n;;                      (js/console.log \"something changed\" mutations)))\n;;         target-element (js/document.getElementById \"text-component\")]\n;;     (.observe observer target-element #js{:attributes true :attributeFilter #js[\"style\"]})))\n\n(defn ^:dev/after-load mount-app-element []\n  (when ^boolean js/goog.DEBUG ;; Code removed in production\n    (re-frame/clear-subscription-cache!))\n  (when-let [el (.getElementById js/document \"root\")]\n    (reagent.dom/render [main] el)))\n\n(defn init []\n  (init-state)\n  (init-mousemove)\n  (mount-app-element)\n  (init-mouseup)\n  (init-url-history-observer)\n  (init-keyboard-events))\n  ;; (init-style-observer))\n"]}